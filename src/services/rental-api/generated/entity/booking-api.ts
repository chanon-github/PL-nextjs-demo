/* tslint:disable */
/* eslint-disable */
/**
 * pl-car-rental-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BaseResponse } from '../model';
// @ts-ignore
import { BookingRequestFormInput } from '../model';
// @ts-ignore
import { BookingRequestGetOutputDataResponse } from '../model';
// @ts-ignore
import { BookingRequestInput } from '../model';
// @ts-ignore
import { CrtBookingRequestBookingRequestSearchOutputPagination } from '../model';
// @ts-ignore
import { SaveDraftInput } from '../model';
// @ts-ignore
import { StringDataResponse } from '../model';
/**
 * BookingApi - axios parameter creator
 * @export
 */
export const BookingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [bookingRequestNo] 
         * @param {SaveDraftInput} [saveDraftInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingBookingRequestSaveDraftPost: async (bookingRequestNo?: string, saveDraftInput?: SaveDraftInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Booking/BookingRequestSaveDraft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bookingRequestNo !== undefined) {
                localVarQueryParameter['bookingRequestNo'] = bookingRequestNo;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveDraftInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [bookingRequestNo] 
         * @param {SaveDraftInput} [saveDraftInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingBookingSaveDraftPost: async (bookingRequestNo?: string, saveDraftInput?: SaveDraftInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Booking/BookingSaveDraft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bookingRequestNo !== undefined) {
                localVarQueryParameter['bookingRequestNo'] = bookingRequestNo;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveDraftInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BookingRequestFormInput} [bookingRequestFormInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingCreateBookingPost: async (bookingRequestFormInput?: BookingRequestFormInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Booking/CreateBooking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingRequestFormInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BookingRequestInput} [bookingRequestInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingCreateBookingRequestPost: async (bookingRequestInput?: BookingRequestInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Booking/CreateBookingRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingRequestInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookingRequestNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingGetBookingDraftBookingRequestNoGet: async (bookingRequestNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingRequestNo' is not null or undefined
            assertParamExists('apiBookingGetBookingDraftBookingRequestNoGet', 'bookingRequestNo', bookingRequestNo)
            const localVarPath = `/api/Booking/GetBookingDraft/{bookingRequestNo}`
                .replace(`{${"bookingRequestNo"}}`, encodeURIComponent(String(bookingRequestNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookingRequestNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingGetBookingRequestDraftBookingRequestNoGet: async (bookingRequestNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingRequestNo' is not null or undefined
            assertParamExists('apiBookingGetBookingRequestDraftBookingRequestNoGet', 'bookingRequestNo', bookingRequestNo)
            const localVarPath = `/api/Booking/GetBookingRequestDraft/{bookingRequestNo}`
                .replace(`{${"bookingRequestNo"}}`, encodeURIComponent(String(bookingRequestNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [bookingNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingGetPdfGet: async (bookingNo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Booking/GetPdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bookingNo !== undefined) {
                localVarQueryParameter['bookingNo'] = bookingNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [bookingRequestNo] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingGetRequestFromGet: async (bookingRequestNo?: string, tenantCode?: string, branchCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Booking/GetRequestFrom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bookingRequestNo !== undefined) {
                localVarQueryParameter['BookingRequestNo'] = bookingRequestNo;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [bookingRequestNo] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingSearchGet: async (bookingRequestNo?: string, tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Booking/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bookingRequestNo !== undefined) {
                localVarQueryParameter['BookingRequestNo'] = bookingRequestNo;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingApi - functional programming interface
 * @export
 */
export const BookingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [bookingRequestNo] 
         * @param {SaveDraftInput} [saveDraftInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBookingBookingRequestSaveDraftPost(bookingRequestNo?: string, saveDraftInput?: SaveDraftInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBookingBookingRequestSaveDraftPost(bookingRequestNo, saveDraftInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [bookingRequestNo] 
         * @param {SaveDraftInput} [saveDraftInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBookingBookingSaveDraftPost(bookingRequestNo?: string, saveDraftInput?: SaveDraftInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBookingBookingSaveDraftPost(bookingRequestNo, saveDraftInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BookingRequestFormInput} [bookingRequestFormInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBookingCreateBookingPost(bookingRequestFormInput?: BookingRequestFormInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBookingCreateBookingPost(bookingRequestFormInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BookingRequestInput} [bookingRequestInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBookingCreateBookingRequestPost(bookingRequestInput?: BookingRequestInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBookingCreateBookingRequestPost(bookingRequestInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bookingRequestNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBookingGetBookingDraftBookingRequestNoGet(bookingRequestNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBookingGetBookingDraftBookingRequestNoGet(bookingRequestNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bookingRequestNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBookingGetBookingRequestDraftBookingRequestNoGet(bookingRequestNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBookingGetBookingRequestDraftBookingRequestNoGet(bookingRequestNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [bookingNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBookingGetPdfGet(bookingNo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBookingGetPdfGet(bookingNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [bookingRequestNo] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBookingGetRequestFromGet(bookingRequestNo?: string, tenantCode?: string, branchCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingRequestGetOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBookingGetRequestFromGet(bookingRequestNo, tenantCode, branchCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [bookingRequestNo] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBookingSearchGet(bookingRequestNo?: string, tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrtBookingRequestBookingRequestSearchOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBookingSearchGet(bookingRequestNo, tenantCode, branchCode, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BookingApi - factory interface
 * @export
 */
export const BookingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookingApiFp(configuration)
    return {
        /**
         * 
         * @param {BookingApiApiBookingBookingRequestSaveDraftPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingBookingRequestSaveDraftPost(requestParameters: BookingApiApiBookingBookingRequestSaveDraftPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.apiBookingBookingRequestSaveDraftPost(requestParameters.bookingRequestNo, requestParameters.saveDraftInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookingApiApiBookingBookingSaveDraftPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingBookingSaveDraftPost(requestParameters: BookingApiApiBookingBookingSaveDraftPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.apiBookingBookingSaveDraftPost(requestParameters.bookingRequestNo, requestParameters.saveDraftInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookingApiApiBookingCreateBookingPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingCreateBookingPost(requestParameters: BookingApiApiBookingCreateBookingPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.apiBookingCreateBookingPost(requestParameters.bookingRequestFormInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookingApiApiBookingCreateBookingRequestPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingCreateBookingRequestPost(requestParameters: BookingApiApiBookingCreateBookingRequestPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.apiBookingCreateBookingRequestPost(requestParameters.bookingRequestInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookingApiApiBookingGetBookingDraftBookingRequestNoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingGetBookingDraftBookingRequestNoGet(requestParameters: BookingApiApiBookingGetBookingDraftBookingRequestNoGetRequest, options?: AxiosRequestConfig): AxiosPromise<StringDataResponse> {
            return localVarFp.apiBookingGetBookingDraftBookingRequestNoGet(requestParameters.bookingRequestNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookingApiApiBookingGetBookingRequestDraftBookingRequestNoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingGetBookingRequestDraftBookingRequestNoGet(requestParameters: BookingApiApiBookingGetBookingRequestDraftBookingRequestNoGetRequest, options?: AxiosRequestConfig): AxiosPromise<StringDataResponse> {
            return localVarFp.apiBookingGetBookingRequestDraftBookingRequestNoGet(requestParameters.bookingRequestNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookingApiApiBookingGetPdfGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingGetPdfGet(requestParameters: BookingApiApiBookingGetPdfGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBookingGetPdfGet(requestParameters.bookingNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookingApiApiBookingGetRequestFromGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingGetRequestFromGet(requestParameters: BookingApiApiBookingGetRequestFromGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BookingRequestGetOutputDataResponse> {
            return localVarFp.apiBookingGetRequestFromGet(requestParameters.bookingRequestNo, requestParameters.tenantCode, requestParameters.branchCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookingApiApiBookingSearchGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBookingSearchGet(requestParameters: BookingApiApiBookingSearchGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CrtBookingRequestBookingRequestSearchOutputPagination> {
            return localVarFp.apiBookingSearchGet(requestParameters.bookingRequestNo, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBookingBookingRequestSaveDraftPost operation in BookingApi.
 * @export
 * @interface BookingApiApiBookingBookingRequestSaveDraftPostRequest
 */
export interface BookingApiApiBookingBookingRequestSaveDraftPostRequest {
    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingBookingRequestSaveDraftPost
     */
    readonly bookingRequestNo?: string

    /**
     * 
     * @type {SaveDraftInput}
     * @memberof BookingApiApiBookingBookingRequestSaveDraftPost
     */
    readonly saveDraftInput?: SaveDraftInput
}

/**
 * Request parameters for apiBookingBookingSaveDraftPost operation in BookingApi.
 * @export
 * @interface BookingApiApiBookingBookingSaveDraftPostRequest
 */
export interface BookingApiApiBookingBookingSaveDraftPostRequest {
    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingBookingSaveDraftPost
     */
    readonly bookingRequestNo?: string

    /**
     * 
     * @type {SaveDraftInput}
     * @memberof BookingApiApiBookingBookingSaveDraftPost
     */
    readonly saveDraftInput?: SaveDraftInput
}

/**
 * Request parameters for apiBookingCreateBookingPost operation in BookingApi.
 * @export
 * @interface BookingApiApiBookingCreateBookingPostRequest
 */
export interface BookingApiApiBookingCreateBookingPostRequest {
    /**
     * 
     * @type {BookingRequestFormInput}
     * @memberof BookingApiApiBookingCreateBookingPost
     */
    readonly bookingRequestFormInput?: BookingRequestFormInput
}

/**
 * Request parameters for apiBookingCreateBookingRequestPost operation in BookingApi.
 * @export
 * @interface BookingApiApiBookingCreateBookingRequestPostRequest
 */
export interface BookingApiApiBookingCreateBookingRequestPostRequest {
    /**
     * 
     * @type {BookingRequestInput}
     * @memberof BookingApiApiBookingCreateBookingRequestPost
     */
    readonly bookingRequestInput?: BookingRequestInput
}

/**
 * Request parameters for apiBookingGetBookingDraftBookingRequestNoGet operation in BookingApi.
 * @export
 * @interface BookingApiApiBookingGetBookingDraftBookingRequestNoGetRequest
 */
export interface BookingApiApiBookingGetBookingDraftBookingRequestNoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingGetBookingDraftBookingRequestNoGet
     */
    readonly bookingRequestNo: string
}

/**
 * Request parameters for apiBookingGetBookingRequestDraftBookingRequestNoGet operation in BookingApi.
 * @export
 * @interface BookingApiApiBookingGetBookingRequestDraftBookingRequestNoGetRequest
 */
export interface BookingApiApiBookingGetBookingRequestDraftBookingRequestNoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingGetBookingRequestDraftBookingRequestNoGet
     */
    readonly bookingRequestNo: string
}

/**
 * Request parameters for apiBookingGetPdfGet operation in BookingApi.
 * @export
 * @interface BookingApiApiBookingGetPdfGetRequest
 */
export interface BookingApiApiBookingGetPdfGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingGetPdfGet
     */
    readonly bookingNo?: string
}

/**
 * Request parameters for apiBookingGetRequestFromGet operation in BookingApi.
 * @export
 * @interface BookingApiApiBookingGetRequestFromGetRequest
 */
export interface BookingApiApiBookingGetRequestFromGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingGetRequestFromGet
     */
    readonly bookingRequestNo?: string

    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingGetRequestFromGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingGetRequestFromGet
     */
    readonly branchCode?: string
}

/**
 * Request parameters for apiBookingSearchGet operation in BookingApi.
 * @export
 * @interface BookingApiApiBookingSearchGetRequest
 */
export interface BookingApiApiBookingSearchGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingSearchGet
     */
    readonly bookingRequestNo?: string

    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingSearchGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingSearchGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {number}
     * @memberof BookingApiApiBookingSearchGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof BookingApiApiBookingSearchGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingSearchGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof BookingApiApiBookingSearchGet
     */
    readonly sortDirection?: string
}

/**
 * BookingApi - object-oriented interface
 * @export
 * @class BookingApi
 * @extends {BaseAPI}
 */
export class BookingApi extends BaseAPI {
    /**
     * 
     * @param {BookingApiApiBookingBookingRequestSaveDraftPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public apiBookingBookingRequestSaveDraftPost(requestParameters: BookingApiApiBookingBookingRequestSaveDraftPostRequest = {}, options?: AxiosRequestConfig) {
        return BookingApiFp(this.configuration).apiBookingBookingRequestSaveDraftPost(requestParameters.bookingRequestNo, requestParameters.saveDraftInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookingApiApiBookingBookingSaveDraftPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public apiBookingBookingSaveDraftPost(requestParameters: BookingApiApiBookingBookingSaveDraftPostRequest = {}, options?: AxiosRequestConfig) {
        return BookingApiFp(this.configuration).apiBookingBookingSaveDraftPost(requestParameters.bookingRequestNo, requestParameters.saveDraftInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookingApiApiBookingCreateBookingPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public apiBookingCreateBookingPost(requestParameters: BookingApiApiBookingCreateBookingPostRequest = {}, options?: AxiosRequestConfig) {
        return BookingApiFp(this.configuration).apiBookingCreateBookingPost(requestParameters.bookingRequestFormInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookingApiApiBookingCreateBookingRequestPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public apiBookingCreateBookingRequestPost(requestParameters: BookingApiApiBookingCreateBookingRequestPostRequest = {}, options?: AxiosRequestConfig) {
        return BookingApiFp(this.configuration).apiBookingCreateBookingRequestPost(requestParameters.bookingRequestInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookingApiApiBookingGetBookingDraftBookingRequestNoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public apiBookingGetBookingDraftBookingRequestNoGet(requestParameters: BookingApiApiBookingGetBookingDraftBookingRequestNoGetRequest, options?: AxiosRequestConfig) {
        return BookingApiFp(this.configuration).apiBookingGetBookingDraftBookingRequestNoGet(requestParameters.bookingRequestNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookingApiApiBookingGetBookingRequestDraftBookingRequestNoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public apiBookingGetBookingRequestDraftBookingRequestNoGet(requestParameters: BookingApiApiBookingGetBookingRequestDraftBookingRequestNoGetRequest, options?: AxiosRequestConfig) {
        return BookingApiFp(this.configuration).apiBookingGetBookingRequestDraftBookingRequestNoGet(requestParameters.bookingRequestNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookingApiApiBookingGetPdfGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public apiBookingGetPdfGet(requestParameters: BookingApiApiBookingGetPdfGetRequest = {}, options?: AxiosRequestConfig) {
        return BookingApiFp(this.configuration).apiBookingGetPdfGet(requestParameters.bookingNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookingApiApiBookingGetRequestFromGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public apiBookingGetRequestFromGet(requestParameters: BookingApiApiBookingGetRequestFromGetRequest = {}, options?: AxiosRequestConfig) {
        return BookingApiFp(this.configuration).apiBookingGetRequestFromGet(requestParameters.bookingRequestNo, requestParameters.tenantCode, requestParameters.branchCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookingApiApiBookingSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public apiBookingSearchGet(requestParameters: BookingApiApiBookingSearchGetRequest = {}, options?: AxiosRequestConfig) {
        return BookingApiFp(this.configuration).apiBookingSearchGet(requestParameters.bookingRequestNo, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }
}

