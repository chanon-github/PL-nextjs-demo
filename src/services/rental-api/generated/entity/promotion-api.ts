/* tslint:disable */
/* eslint-disable */
/**
 * pl-car-rental-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { CrtPromotionPromotionSearchOutputPagination } from '../model';
// @ts-ignore
import { DeleteInput } from '../model';
// @ts-ignore
import { PromotionInput } from '../model';
// @ts-ignore
import { PromotionOutput } from '../model';
/**
 * PromotionApi - axios parameter creator
 * @export
 */
export const PromotionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteInput} [deleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPromotionDeleteDelete: async (deleteInput?: DeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Promotion/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPromotionGetIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPromotionGetIdGet', 'id', id)
            const localVarPath = `/api/Promotion/Get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionInput} [promotionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPromotionSavePost: async (promotionInput?: PromotionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Promotion/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promotionInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [name] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [startDateToUse] 
         * @param {string} [endDateToUse] 
         * @param {string} [status] 
         * @param {boolean} [isActive] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPromotionSearchGet: async (code?: string, name?: string, startDate?: string, endDate?: string, startDateToUse?: string, endDateToUse?: string, status?: string, isActive?: boolean, tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Promotion/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (startDateToUse !== undefined) {
                localVarQueryParameter['StartDateToUse'] = (startDateToUse as any instanceof Date) ?
                    (startDateToUse as any).toISOString() :
                    startDateToUse;
            }

            if (endDateToUse !== undefined) {
                localVarQueryParameter['EndDateToUse'] = (endDateToUse as any instanceof Date) ?
                    (endDateToUse as any).toISOString() :
                    endDateToUse;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['IsActive'] = isActive;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromotionApi - functional programming interface
 * @export
 */
export const PromotionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromotionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteInput} [deleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPromotionDeleteDelete(deleteInput?: DeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPromotionDeleteDelete(deleteInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPromotionGetIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPromotionGetIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionInput} [promotionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPromotionSavePost(promotionInput?: PromotionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPromotionSavePost(promotionInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [name] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [startDateToUse] 
         * @param {string} [endDateToUse] 
         * @param {string} [status] 
         * @param {boolean} [isActive] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPromotionSearchGet(code?: string, name?: string, startDate?: string, endDate?: string, startDateToUse?: string, endDateToUse?: string, status?: string, isActive?: boolean, tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrtPromotionPromotionSearchOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPromotionSearchGet(code, name, startDate, endDate, startDateToUse, endDateToUse, status, isActive, tenantCode, branchCode, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PromotionApi - factory interface
 * @export
 */
export const PromotionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromotionApiFp(configuration)
    return {
        /**
         * 
         * @param {PromotionApiApiPromotionDeleteDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPromotionDeleteDelete(requestParameters: PromotionApiApiPromotionDeleteDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiPromotionDeleteDelete(requestParameters.deleteInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionApiApiPromotionGetIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPromotionGetIdGet(requestParameters: PromotionApiApiPromotionGetIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<PromotionOutput> {
            return localVarFp.apiPromotionGetIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionApiApiPromotionSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPromotionSavePost(requestParameters: PromotionApiApiPromotionSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiPromotionSavePost(requestParameters.promotionInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionApiApiPromotionSearchGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPromotionSearchGet(requestParameters: PromotionApiApiPromotionSearchGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CrtPromotionPromotionSearchOutputPagination> {
            return localVarFp.apiPromotionSearchGet(requestParameters.code, requestParameters.name, requestParameters.startDate, requestParameters.endDate, requestParameters.startDateToUse, requestParameters.endDateToUse, requestParameters.status, requestParameters.isActive, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiPromotionDeleteDelete operation in PromotionApi.
 * @export
 * @interface PromotionApiApiPromotionDeleteDeleteRequest
 */
export interface PromotionApiApiPromotionDeleteDeleteRequest {
    /**
     * 
     * @type {DeleteInput}
     * @memberof PromotionApiApiPromotionDeleteDelete
     */
    readonly deleteInput?: DeleteInput
}

/**
 * Request parameters for apiPromotionGetIdGet operation in PromotionApi.
 * @export
 * @interface PromotionApiApiPromotionGetIdGetRequest
 */
export interface PromotionApiApiPromotionGetIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof PromotionApiApiPromotionGetIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiPromotionSavePost operation in PromotionApi.
 * @export
 * @interface PromotionApiApiPromotionSavePostRequest
 */
export interface PromotionApiApiPromotionSavePostRequest {
    /**
     * 
     * @type {PromotionInput}
     * @memberof PromotionApiApiPromotionSavePost
     */
    readonly promotionInput?: PromotionInput
}

/**
 * Request parameters for apiPromotionSearchGet operation in PromotionApi.
 * @export
 * @interface PromotionApiApiPromotionSearchGetRequest
 */
export interface PromotionApiApiPromotionSearchGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly code?: string

    /**
     * 
     * @type {string}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly endDate?: string

    /**
     * 
     * @type {string}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly startDateToUse?: string

    /**
     * 
     * @type {string}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly endDateToUse?: string

    /**
     * 
     * @type {string}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly status?: string

    /**
     * 
     * @type {boolean}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {string}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {number}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof PromotionApiApiPromotionSearchGet
     */
    readonly sortDirection?: string
}

/**
 * PromotionApi - object-oriented interface
 * @export
 * @class PromotionApi
 * @extends {BaseAPI}
 */
export class PromotionApi extends BaseAPI {
    /**
     * 
     * @param {PromotionApiApiPromotionDeleteDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public apiPromotionDeleteDelete(requestParameters: PromotionApiApiPromotionDeleteDeleteRequest = {}, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).apiPromotionDeleteDelete(requestParameters.deleteInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionApiApiPromotionGetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public apiPromotionGetIdGet(requestParameters: PromotionApiApiPromotionGetIdGetRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).apiPromotionGetIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionApiApiPromotionSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public apiPromotionSavePost(requestParameters: PromotionApiApiPromotionSavePostRequest = {}, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).apiPromotionSavePost(requestParameters.promotionInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionApiApiPromotionSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public apiPromotionSearchGet(requestParameters: PromotionApiApiPromotionSearchGetRequest = {}, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).apiPromotionSearchGet(requestParameters.code, requestParameters.name, requestParameters.startDate, requestParameters.endDate, requestParameters.startDateToUse, requestParameters.endDateToUse, requestParameters.status, requestParameters.isActive, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }
}

