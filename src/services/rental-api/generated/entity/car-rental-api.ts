/* tslint:disable */
/* eslint-disable */
/**
 * pl-car-rental-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BookingHistoryOutputDataResponse } from '../model';
// @ts-ignore
import { BookingInput } from '../model';
// @ts-ignore
import { BookingOutputDataResponse } from '../model';
// @ts-ignore
import { CarRentalPromotionOutput } from '../model';
// @ts-ignore
import { CarRentalVehicleMasterOutput } from '../model';
// @ts-ignore
import { GetPaymentInfoOutputDataResponse } from '../model';
// @ts-ignore
import { OptionOutputDataResponse } from '../model';
// @ts-ignore
import { PriceCalculationOutputDataResponse } from '../model';
// @ts-ignore
import { PromotionPackageOutputListDataResponse } from '../model';
// @ts-ignore
import { SearchOutputDataResponse } from '../model';
// @ts-ignore
import { VehicleSearchOutputVehicleSearchOutputPagination } from '../model';
/**
 * CarRentalApi - axios parameter creator
 * @export
 */
export const CarRentalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BookingInput} [bookingInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalBookPost: async (bookingInput?: BookingInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CarRental/Book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BookingInput} [bookingInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalCalculatePricePost: async (bookingInput?: BookingInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CarRental/CalculatePrice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetAllOptionsGet: async (tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CarRental/GetAllOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookingNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetBookingByNoBookingNoGet: async (bookingNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingNo' is not null or undefined
            assertParamExists('apiCarRentalGetBookingByNoBookingNoGet', 'bookingNo', bookingNo)
            const localVarPath = `/api/CarRental/GetBookingByNo/{bookingNo}`
                .replace(`{${"bookingNo"}}`, encodeURIComponent(String(bookingNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [promotionId] 
         * @param {number} [vehicleMasterId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [type] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetPackageGet: async (promotionId?: number, vehicleMasterId?: number, startDate?: string, endDate?: string, type?: string, tenantCode?: string, branchCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CarRental/GetPackage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (promotionId !== undefined) {
                localVarQueryParameter['PromotionId'] = promotionId;
            }

            if (vehicleMasterId !== undefined) {
                localVarQueryParameter['VehicleMasterId'] = vehicleMasterId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [bookingNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetPaymentInfoGet: async (bookingNo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CarRental/GetPaymentInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bookingNo !== undefined) {
                localVarQueryParameter['BookingNo'] = bookingNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetPromotionGet: async (id?: number, tenantCode?: string, branchCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CarRental/GetPromotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [promotionVehicleId] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetVehicleMasterGet: async (promotionVehicleId?: number, tenantCode?: string, branchCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CarRental/GetVehicleMaster`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (promotionVehicleId !== undefined) {
                localVarQueryParameter['PromotionVehicleId'] = promotionVehicleId;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [bookingNo] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {Array<string>} [statuses] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalHitoriesGet: async (bookingNo?: string, startDate?: string, endDate?: string, statuses?: Array<string>, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CarRental/Hitories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bookingNo !== undefined) {
                localVarQueryParameter['BookingNo'] = bookingNo;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (statuses) {
                localVarQueryParameter['Statuses'] = statuses;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [status] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalSearchAvailableVehicleGet: async (keyword?: string, startDate?: string, endDate?: string, status?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CarRental/SearchAvailableVehicle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [receiveLocationCode] 
         * @param {string} [returnLocationCode] 
         * @param {Array<string>} [carType] 
         * @param {Array<string>} [branch] 
         * @param {number} [minPrice] 
         * @param {number} [maxPrice] 
         * @param {Array<string>} [gear] 
         * @param {Array<string>} [brand] 
         * @param {Array<number>} [vehicleMasterIds] 
         * @param {number} [minSeat] 
         * @param {number} [maxSeat] 
         * @param {boolean} [recommended] 
         * @param {number} [promotionId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalSearchGet: async (tenantCode?: string, branchCode?: string, startDate?: string, endDate?: string, receiveLocationCode?: string, returnLocationCode?: string, carType?: Array<string>, branch?: Array<string>, minPrice?: number, maxPrice?: number, gear?: Array<string>, brand?: Array<string>, vehicleMasterIds?: Array<number>, minSeat?: number, maxSeat?: number, recommended?: boolean, promotionId?: number, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CarRental/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (receiveLocationCode !== undefined) {
                localVarQueryParameter['ReceiveLocationCode'] = receiveLocationCode;
            }

            if (returnLocationCode !== undefined) {
                localVarQueryParameter['ReturnLocationCode'] = returnLocationCode;
            }

            if (carType) {
                localVarQueryParameter['CarType'] = carType;
            }

            if (branch) {
                localVarQueryParameter['Branch'] = branch;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['MinPrice'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['MaxPrice'] = maxPrice;
            }

            if (gear) {
                localVarQueryParameter['Gear'] = gear;
            }

            if (brand) {
                localVarQueryParameter['Brand'] = brand;
            }

            if (vehicleMasterIds) {
                localVarQueryParameter['VehicleMasterIds'] = vehicleMasterIds;
            }

            if (minSeat !== undefined) {
                localVarQueryParameter['MinSeat'] = minSeat;
            }

            if (maxSeat !== undefined) {
                localVarQueryParameter['MaxSeat'] = maxSeat;
            }

            if (recommended !== undefined) {
                localVarQueryParameter['Recommended'] = recommended;
            }

            if (promotionId !== undefined) {
                localVarQueryParameter['PromotionId'] = promotionId;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarRentalApi - functional programming interface
 * @export
 */
export const CarRentalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarRentalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BookingInput} [bookingInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarRentalBookPost(bookingInput?: BookingInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarRentalBookPost(bookingInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BookingInput} [bookingInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarRentalCalculatePricePost(bookingInput?: BookingInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PriceCalculationOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarRentalCalculatePricePost(bookingInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarRentalGetAllOptionsGet(tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarRentalGetAllOptionsGet(tenantCode, branchCode, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bookingNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarRentalGetBookingByNoBookingNoGet(bookingNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarRentalGetBookingByNoBookingNoGet(bookingNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [promotionId] 
         * @param {number} [vehicleMasterId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [type] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarRentalGetPackageGet(promotionId?: number, vehicleMasterId?: number, startDate?: string, endDate?: string, type?: string, tenantCode?: string, branchCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionPackageOutputListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarRentalGetPackageGet(promotionId, vehicleMasterId, startDate, endDate, type, tenantCode, branchCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [bookingNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarRentalGetPaymentInfoGet(bookingNo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaymentInfoOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarRentalGetPaymentInfoGet(bookingNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarRentalGetPromotionGet(id?: number, tenantCode?: string, branchCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarRentalPromotionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarRentalGetPromotionGet(id, tenantCode, branchCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [promotionVehicleId] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarRentalGetVehicleMasterGet(promotionVehicleId?: number, tenantCode?: string, branchCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarRentalVehicleMasterOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarRentalGetVehicleMasterGet(promotionVehicleId, tenantCode, branchCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [bookingNo] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {Array<string>} [statuses] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarRentalHitoriesGet(bookingNo?: string, startDate?: string, endDate?: string, statuses?: Array<string>, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingHistoryOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarRentalHitoriesGet(bookingNo, startDate, endDate, statuses, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [status] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarRentalSearchAvailableVehicleGet(keyword?: string, startDate?: string, endDate?: string, status?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleSearchOutputVehicleSearchOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarRentalSearchAvailableVehicleGet(keyword, startDate, endDate, status, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [receiveLocationCode] 
         * @param {string} [returnLocationCode] 
         * @param {Array<string>} [carType] 
         * @param {Array<string>} [branch] 
         * @param {number} [minPrice] 
         * @param {number} [maxPrice] 
         * @param {Array<string>} [gear] 
         * @param {Array<string>} [brand] 
         * @param {Array<number>} [vehicleMasterIds] 
         * @param {number} [minSeat] 
         * @param {number} [maxSeat] 
         * @param {boolean} [recommended] 
         * @param {number} [promotionId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarRentalSearchGet(tenantCode?: string, branchCode?: string, startDate?: string, endDate?: string, receiveLocationCode?: string, returnLocationCode?: string, carType?: Array<string>, branch?: Array<string>, minPrice?: number, maxPrice?: number, gear?: Array<string>, brand?: Array<string>, vehicleMasterIds?: Array<number>, minSeat?: number, maxSeat?: number, recommended?: boolean, promotionId?: number, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarRentalSearchGet(tenantCode, branchCode, startDate, endDate, receiveLocationCode, returnLocationCode, carType, branch, minPrice, maxPrice, gear, brand, vehicleMasterIds, minSeat, maxSeat, recommended, promotionId, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CarRentalApi - factory interface
 * @export
 */
export const CarRentalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarRentalApiFp(configuration)
    return {
        /**
         * 
         * @param {CarRentalApiApiCarRentalBookPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalBookPost(requestParameters: CarRentalApiApiCarRentalBookPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BookingOutputDataResponse> {
            return localVarFp.apiCarRentalBookPost(requestParameters.bookingInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarRentalApiApiCarRentalCalculatePricePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalCalculatePricePost(requestParameters: CarRentalApiApiCarRentalCalculatePricePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PriceCalculationOutputDataResponse> {
            return localVarFp.apiCarRentalCalculatePricePost(requestParameters.bookingInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarRentalApiApiCarRentalGetAllOptionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetAllOptionsGet(requestParameters: CarRentalApiApiCarRentalGetAllOptionsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OptionOutputDataResponse> {
            return localVarFp.apiCarRentalGetAllOptionsGet(requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarRentalApiApiCarRentalGetBookingByNoBookingNoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetBookingByNoBookingNoGet(requestParameters: CarRentalApiApiCarRentalGetBookingByNoBookingNoGetRequest, options?: AxiosRequestConfig): AxiosPromise<BookingOutputDataResponse> {
            return localVarFp.apiCarRentalGetBookingByNoBookingNoGet(requestParameters.bookingNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarRentalApiApiCarRentalGetPackageGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetPackageGet(requestParameters: CarRentalApiApiCarRentalGetPackageGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PromotionPackageOutputListDataResponse> {
            return localVarFp.apiCarRentalGetPackageGet(requestParameters.promotionId, requestParameters.vehicleMasterId, requestParameters.startDate, requestParameters.endDate, requestParameters.type, requestParameters.tenantCode, requestParameters.branchCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarRentalApiApiCarRentalGetPaymentInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetPaymentInfoGet(requestParameters: CarRentalApiApiCarRentalGetPaymentInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetPaymentInfoOutputDataResponse> {
            return localVarFp.apiCarRentalGetPaymentInfoGet(requestParameters.bookingNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarRentalApiApiCarRentalGetPromotionGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetPromotionGet(requestParameters: CarRentalApiApiCarRentalGetPromotionGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CarRentalPromotionOutput> {
            return localVarFp.apiCarRentalGetPromotionGet(requestParameters.id, requestParameters.tenantCode, requestParameters.branchCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarRentalApiApiCarRentalGetVehicleMasterGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalGetVehicleMasterGet(requestParameters: CarRentalApiApiCarRentalGetVehicleMasterGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CarRentalVehicleMasterOutput> {
            return localVarFp.apiCarRentalGetVehicleMasterGet(requestParameters.promotionVehicleId, requestParameters.tenantCode, requestParameters.branchCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarRentalApiApiCarRentalHitoriesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalHitoriesGet(requestParameters: CarRentalApiApiCarRentalHitoriesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BookingHistoryOutputDataResponse> {
            return localVarFp.apiCarRentalHitoriesGet(requestParameters.bookingNo, requestParameters.startDate, requestParameters.endDate, requestParameters.statuses, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarRentalApiApiCarRentalSearchAvailableVehicleGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalSearchAvailableVehicleGet(requestParameters: CarRentalApiApiCarRentalSearchAvailableVehicleGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VehicleSearchOutputVehicleSearchOutputPagination> {
            return localVarFp.apiCarRentalSearchAvailableVehicleGet(requestParameters.keyword, requestParameters.startDate, requestParameters.endDate, requestParameters.status, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarRentalApiApiCarRentalSearchGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarRentalSearchGet(requestParameters: CarRentalApiApiCarRentalSearchGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SearchOutputDataResponse> {
            return localVarFp.apiCarRentalSearchGet(requestParameters.tenantCode, requestParameters.branchCode, requestParameters.startDate, requestParameters.endDate, requestParameters.receiveLocationCode, requestParameters.returnLocationCode, requestParameters.carType, requestParameters.branch, requestParameters.minPrice, requestParameters.maxPrice, requestParameters.gear, requestParameters.brand, requestParameters.vehicleMasterIds, requestParameters.minSeat, requestParameters.maxSeat, requestParameters.recommended, requestParameters.promotionId, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiCarRentalBookPost operation in CarRentalApi.
 * @export
 * @interface CarRentalApiApiCarRentalBookPostRequest
 */
export interface CarRentalApiApiCarRentalBookPostRequest {
    /**
     * 
     * @type {BookingInput}
     * @memberof CarRentalApiApiCarRentalBookPost
     */
    readonly bookingInput?: BookingInput
}

/**
 * Request parameters for apiCarRentalCalculatePricePost operation in CarRentalApi.
 * @export
 * @interface CarRentalApiApiCarRentalCalculatePricePostRequest
 */
export interface CarRentalApiApiCarRentalCalculatePricePostRequest {
    /**
     * 
     * @type {BookingInput}
     * @memberof CarRentalApiApiCarRentalCalculatePricePost
     */
    readonly bookingInput?: BookingInput
}

/**
 * Request parameters for apiCarRentalGetAllOptionsGet operation in CarRentalApi.
 * @export
 * @interface CarRentalApiApiCarRentalGetAllOptionsGetRequest
 */
export interface CarRentalApiApiCarRentalGetAllOptionsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetAllOptionsGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetAllOptionsGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalGetAllOptionsGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalGetAllOptionsGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetAllOptionsGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetAllOptionsGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiCarRentalGetBookingByNoBookingNoGet operation in CarRentalApi.
 * @export
 * @interface CarRentalApiApiCarRentalGetBookingByNoBookingNoGetRequest
 */
export interface CarRentalApiApiCarRentalGetBookingByNoBookingNoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetBookingByNoBookingNoGet
     */
    readonly bookingNo: string
}

/**
 * Request parameters for apiCarRentalGetPackageGet operation in CarRentalApi.
 * @export
 * @interface CarRentalApiApiCarRentalGetPackageGetRequest
 */
export interface CarRentalApiApiCarRentalGetPackageGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalGetPackageGet
     */
    readonly promotionId?: number

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalGetPackageGet
     */
    readonly vehicleMasterId?: number

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetPackageGet
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetPackageGet
     */
    readonly endDate?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetPackageGet
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetPackageGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetPackageGet
     */
    readonly branchCode?: string
}

/**
 * Request parameters for apiCarRentalGetPaymentInfoGet operation in CarRentalApi.
 * @export
 * @interface CarRentalApiApiCarRentalGetPaymentInfoGetRequest
 */
export interface CarRentalApiApiCarRentalGetPaymentInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetPaymentInfoGet
     */
    readonly bookingNo?: string
}

/**
 * Request parameters for apiCarRentalGetPromotionGet operation in CarRentalApi.
 * @export
 * @interface CarRentalApiApiCarRentalGetPromotionGetRequest
 */
export interface CarRentalApiApiCarRentalGetPromotionGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalGetPromotionGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetPromotionGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetPromotionGet
     */
    readonly branchCode?: string
}

/**
 * Request parameters for apiCarRentalGetVehicleMasterGet operation in CarRentalApi.
 * @export
 * @interface CarRentalApiApiCarRentalGetVehicleMasterGetRequest
 */
export interface CarRentalApiApiCarRentalGetVehicleMasterGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalGetVehicleMasterGet
     */
    readonly promotionVehicleId?: number

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetVehicleMasterGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalGetVehicleMasterGet
     */
    readonly branchCode?: string
}

/**
 * Request parameters for apiCarRentalHitoriesGet operation in CarRentalApi.
 * @export
 * @interface CarRentalApiApiCarRentalHitoriesGetRequest
 */
export interface CarRentalApiApiCarRentalHitoriesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalHitoriesGet
     */
    readonly bookingNo?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalHitoriesGet
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalHitoriesGet
     */
    readonly endDate?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof CarRentalApiApiCarRentalHitoriesGet
     */
    readonly statuses?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalHitoriesGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalHitoriesGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalHitoriesGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalHitoriesGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiCarRentalSearchAvailableVehicleGet operation in CarRentalApi.
 * @export
 * @interface CarRentalApiApiCarRentalSearchAvailableVehicleGetRequest
 */
export interface CarRentalApiApiCarRentalSearchAvailableVehicleGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchAvailableVehicleGet
     */
    readonly keyword?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchAvailableVehicleGet
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchAvailableVehicleGet
     */
    readonly endDate?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchAvailableVehicleGet
     */
    readonly status?: string

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalSearchAvailableVehicleGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalSearchAvailableVehicleGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchAvailableVehicleGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchAvailableVehicleGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiCarRentalSearchGet operation in CarRentalApi.
 * @export
 * @interface CarRentalApiApiCarRentalSearchGetRequest
 */
export interface CarRentalApiApiCarRentalSearchGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly endDate?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly receiveLocationCode?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly returnLocationCode?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly carType?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly branch?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly minPrice?: number

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly maxPrice?: number

    /**
     * 
     * @type {Array<string>}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly gear?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly brand?: Array<string>

    /**
     * 
     * @type {Array<number>}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly vehicleMasterIds?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly minSeat?: number

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly maxSeat?: number

    /**
     * 
     * @type {boolean}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly recommended?: boolean

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly promotionId?: number

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof CarRentalApiApiCarRentalSearchGet
     */
    readonly sortDirection?: string
}

/**
 * CarRentalApi - object-oriented interface
 * @export
 * @class CarRentalApi
 * @extends {BaseAPI}
 */
export class CarRentalApi extends BaseAPI {
    /**
     * 
     * @param {CarRentalApiApiCarRentalBookPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarRentalApi
     */
    public apiCarRentalBookPost(requestParameters: CarRentalApiApiCarRentalBookPostRequest = {}, options?: AxiosRequestConfig) {
        return CarRentalApiFp(this.configuration).apiCarRentalBookPost(requestParameters.bookingInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarRentalApiApiCarRentalCalculatePricePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarRentalApi
     */
    public apiCarRentalCalculatePricePost(requestParameters: CarRentalApiApiCarRentalCalculatePricePostRequest = {}, options?: AxiosRequestConfig) {
        return CarRentalApiFp(this.configuration).apiCarRentalCalculatePricePost(requestParameters.bookingInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarRentalApiApiCarRentalGetAllOptionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarRentalApi
     */
    public apiCarRentalGetAllOptionsGet(requestParameters: CarRentalApiApiCarRentalGetAllOptionsGetRequest = {}, options?: AxiosRequestConfig) {
        return CarRentalApiFp(this.configuration).apiCarRentalGetAllOptionsGet(requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarRentalApiApiCarRentalGetBookingByNoBookingNoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarRentalApi
     */
    public apiCarRentalGetBookingByNoBookingNoGet(requestParameters: CarRentalApiApiCarRentalGetBookingByNoBookingNoGetRequest, options?: AxiosRequestConfig) {
        return CarRentalApiFp(this.configuration).apiCarRentalGetBookingByNoBookingNoGet(requestParameters.bookingNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarRentalApiApiCarRentalGetPackageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarRentalApi
     */
    public apiCarRentalGetPackageGet(requestParameters: CarRentalApiApiCarRentalGetPackageGetRequest = {}, options?: AxiosRequestConfig) {
        return CarRentalApiFp(this.configuration).apiCarRentalGetPackageGet(requestParameters.promotionId, requestParameters.vehicleMasterId, requestParameters.startDate, requestParameters.endDate, requestParameters.type, requestParameters.tenantCode, requestParameters.branchCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarRentalApiApiCarRentalGetPaymentInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarRentalApi
     */
    public apiCarRentalGetPaymentInfoGet(requestParameters: CarRentalApiApiCarRentalGetPaymentInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CarRentalApiFp(this.configuration).apiCarRentalGetPaymentInfoGet(requestParameters.bookingNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarRentalApiApiCarRentalGetPromotionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarRentalApi
     */
    public apiCarRentalGetPromotionGet(requestParameters: CarRentalApiApiCarRentalGetPromotionGetRequest = {}, options?: AxiosRequestConfig) {
        return CarRentalApiFp(this.configuration).apiCarRentalGetPromotionGet(requestParameters.id, requestParameters.tenantCode, requestParameters.branchCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarRentalApiApiCarRentalGetVehicleMasterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarRentalApi
     */
    public apiCarRentalGetVehicleMasterGet(requestParameters: CarRentalApiApiCarRentalGetVehicleMasterGetRequest = {}, options?: AxiosRequestConfig) {
        return CarRentalApiFp(this.configuration).apiCarRentalGetVehicleMasterGet(requestParameters.promotionVehicleId, requestParameters.tenantCode, requestParameters.branchCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarRentalApiApiCarRentalHitoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarRentalApi
     */
    public apiCarRentalHitoriesGet(requestParameters: CarRentalApiApiCarRentalHitoriesGetRequest = {}, options?: AxiosRequestConfig) {
        return CarRentalApiFp(this.configuration).apiCarRentalHitoriesGet(requestParameters.bookingNo, requestParameters.startDate, requestParameters.endDate, requestParameters.statuses, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarRentalApiApiCarRentalSearchAvailableVehicleGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarRentalApi
     */
    public apiCarRentalSearchAvailableVehicleGet(requestParameters: CarRentalApiApiCarRentalSearchAvailableVehicleGetRequest = {}, options?: AxiosRequestConfig) {
        return CarRentalApiFp(this.configuration).apiCarRentalSearchAvailableVehicleGet(requestParameters.keyword, requestParameters.startDate, requestParameters.endDate, requestParameters.status, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarRentalApiApiCarRentalSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarRentalApi
     */
    public apiCarRentalSearchGet(requestParameters: CarRentalApiApiCarRentalSearchGetRequest = {}, options?: AxiosRequestConfig) {
        return CarRentalApiFp(this.configuration).apiCarRentalSearchGet(requestParameters.tenantCode, requestParameters.branchCode, requestParameters.startDate, requestParameters.endDate, requestParameters.receiveLocationCode, requestParameters.returnLocationCode, requestParameters.carType, requestParameters.branch, requestParameters.minPrice, requestParameters.maxPrice, requestParameters.gear, requestParameters.brand, requestParameters.vehicleMasterIds, requestParameters.minSeat, requestParameters.maxSeat, requestParameters.recommended, requestParameters.promotionId, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }
}

