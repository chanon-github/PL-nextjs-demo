/* tslint:disable */
/* eslint-disable */
/**
 * pl-car-rental-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { PackageDeleteInput } from '../model';
// @ts-ignore
import { PackageItemSaveInput } from '../model';
// @ts-ignore
import { PackageItemSearchOutputPackageItemSearchOutputPagination } from '../model';
/**
 * PackageItemApi - axios parameter creator
 * @export
 */
export const PackageItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PackageDeleteInput} [packageDeleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackageItemDeleteDelete: async (packageDeleteInput?: PackageDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PackageItem/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(packageDeleteInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PackageItemSaveInput} [packageItemSaveInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackageItemSavePost: async (packageItemSaveInput?: PackageItemSaveInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PackageItem/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(packageItemSaveInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [packageCode] 
         * @param {string} [packageName] 
         * @param {string} [name] 
         * @param {string} [type] 
         * @param {boolean} [isActive] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackageItemSearchGet: async (code?: string, packageCode?: string, packageName?: string, name?: string, type?: string, isActive?: boolean, tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PackageItem/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (packageCode !== undefined) {
                localVarQueryParameter['PackageCode'] = packageCode;
            }

            if (packageName !== undefined) {
                localVarQueryParameter['PackageName'] = packageName;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['IsActive'] = isActive;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PackageItemApi - functional programming interface
 * @export
 */
export const PackageItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PackageItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PackageDeleteInput} [packageDeleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPackageItemDeleteDelete(packageDeleteInput?: PackageDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPackageItemDeleteDelete(packageDeleteInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PackageItemSaveInput} [packageItemSaveInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPackageItemSavePost(packageItemSaveInput?: PackageItemSaveInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPackageItemSavePost(packageItemSaveInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [packageCode] 
         * @param {string} [packageName] 
         * @param {string} [name] 
         * @param {string} [type] 
         * @param {boolean} [isActive] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPackageItemSearchGet(code?: string, packageCode?: string, packageName?: string, name?: string, type?: string, isActive?: boolean, tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageItemSearchOutputPackageItemSearchOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPackageItemSearchGet(code, packageCode, packageName, name, type, isActive, tenantCode, branchCode, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PackageItemApi - factory interface
 * @export
 */
export const PackageItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PackageItemApiFp(configuration)
    return {
        /**
         * 
         * @param {PackageItemApiApiPackageItemDeleteDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackageItemDeleteDelete(requestParameters: PackageItemApiApiPackageItemDeleteDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiPackageItemDeleteDelete(requestParameters.packageDeleteInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PackageItemApiApiPackageItemSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackageItemSavePost(requestParameters: PackageItemApiApiPackageItemSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiPackageItemSavePost(requestParameters.packageItemSaveInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PackageItemApiApiPackageItemSearchGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackageItemSearchGet(requestParameters: PackageItemApiApiPackageItemSearchGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PackageItemSearchOutputPackageItemSearchOutputPagination> {
            return localVarFp.apiPackageItemSearchGet(requestParameters.code, requestParameters.packageCode, requestParameters.packageName, requestParameters.name, requestParameters.type, requestParameters.isActive, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiPackageItemDeleteDelete operation in PackageItemApi.
 * @export
 * @interface PackageItemApiApiPackageItemDeleteDeleteRequest
 */
export interface PackageItemApiApiPackageItemDeleteDeleteRequest {
    /**
     * 
     * @type {PackageDeleteInput}
     * @memberof PackageItemApiApiPackageItemDeleteDelete
     */
    readonly packageDeleteInput?: PackageDeleteInput
}

/**
 * Request parameters for apiPackageItemSavePost operation in PackageItemApi.
 * @export
 * @interface PackageItemApiApiPackageItemSavePostRequest
 */
export interface PackageItemApiApiPackageItemSavePostRequest {
    /**
     * 
     * @type {PackageItemSaveInput}
     * @memberof PackageItemApiApiPackageItemSavePost
     */
    readonly packageItemSaveInput?: PackageItemSaveInput
}

/**
 * Request parameters for apiPackageItemSearchGet operation in PackageItemApi.
 * @export
 * @interface PackageItemApiApiPackageItemSearchGetRequest
 */
export interface PackageItemApiApiPackageItemSearchGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly code?: string

    /**
     * 
     * @type {string}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly packageCode?: string

    /**
     * 
     * @type {string}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly packageName?: string

    /**
     * 
     * @type {string}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly type?: string

    /**
     * 
     * @type {boolean}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {string}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {number}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof PackageItemApiApiPackageItemSearchGet
     */
    readonly sortDirection?: string
}

/**
 * PackageItemApi - object-oriented interface
 * @export
 * @class PackageItemApi
 * @extends {BaseAPI}
 */
export class PackageItemApi extends BaseAPI {
    /**
     * 
     * @param {PackageItemApiApiPackageItemDeleteDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageItemApi
     */
    public apiPackageItemDeleteDelete(requestParameters: PackageItemApiApiPackageItemDeleteDeleteRequest = {}, options?: AxiosRequestConfig) {
        return PackageItemApiFp(this.configuration).apiPackageItemDeleteDelete(requestParameters.packageDeleteInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PackageItemApiApiPackageItemSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageItemApi
     */
    public apiPackageItemSavePost(requestParameters: PackageItemApiApiPackageItemSavePostRequest = {}, options?: AxiosRequestConfig) {
        return PackageItemApiFp(this.configuration).apiPackageItemSavePost(requestParameters.packageItemSaveInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PackageItemApiApiPackageItemSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageItemApi
     */
    public apiPackageItemSearchGet(requestParameters: PackageItemApiApiPackageItemSearchGetRequest = {}, options?: AxiosRequestConfig) {
        return PackageItemApiFp(this.configuration).apiPackageItemSearchGet(requestParameters.code, requestParameters.packageCode, requestParameters.packageName, requestParameters.name, requestParameters.type, requestParameters.isActive, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }
}

