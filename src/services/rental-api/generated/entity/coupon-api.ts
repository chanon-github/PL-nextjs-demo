/* tslint:disable */
/* eslint-disable */
/**
 * pl-car-rental-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CouponOutputDataResponse } from '../model';
/**
 * CouponApi - axios parameter creator
 * @export
 */
export const CouponApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [couponCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCouponGetGet: async (couponCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Coupon/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (couponCode !== undefined) {
                localVarQueryParameter['couponCode'] = couponCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CouponApi - functional programming interface
 * @export
 */
export const CouponApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CouponApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [couponCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCouponGetGet(couponCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CouponOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCouponGetGet(couponCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CouponApi - factory interface
 * @export
 */
export const CouponApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CouponApiFp(configuration)
    return {
        /**
         * 
         * @param {CouponApiApiCouponGetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCouponGetGet(requestParameters: CouponApiApiCouponGetGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CouponOutputDataResponse> {
            return localVarFp.apiCouponGetGet(requestParameters.couponCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiCouponGetGet operation in CouponApi.
 * @export
 * @interface CouponApiApiCouponGetGetRequest
 */
export interface CouponApiApiCouponGetGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CouponApiApiCouponGetGet
     */
    readonly couponCode?: string
}

/**
 * CouponApi - object-oriented interface
 * @export
 * @class CouponApi
 * @extends {BaseAPI}
 */
export class CouponApi extends BaseAPI {
    /**
     * 
     * @param {CouponApiApiCouponGetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    public apiCouponGetGet(requestParameters: CouponApiApiCouponGetGetRequest = {}, options?: AxiosRequestConfig) {
        return CouponApiFp(this.configuration).apiCouponGetGet(requestParameters.couponCode, options).then((request) => request(this.axios, this.basePath));
    }
}

