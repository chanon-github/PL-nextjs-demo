/* tslint:disable */
/* eslint-disable */
/**
 * pl-car-rental-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CallbackInput } from '../model';
// @ts-ignore
import { CreditCardPaymentRequestInput } from '../model';
// @ts-ignore
import { CreditCardResponse } from '../model';
// @ts-ignore
import { InquiryRequestInput } from '../model';
// @ts-ignore
import { QRPaymentRequestInput } from '../model';
// @ts-ignore
import { QRPaymentResponse } from '../model';
/**
 * MpayPaymentApi - axios parameter creator
 * @export
 */
export const MpayPaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CallbackInput} [callbackInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMpayPaymentConfirmOrderPost: async (callbackInput?: CallbackInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MpayPayment/ConfirmOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(callbackInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreditCardPaymentRequestInput} [creditCardPaymentRequestInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMpayPaymentCreateCreditCardPaymentPost: async (creditCardPaymentRequestInput?: CreditCardPaymentRequestInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MpayPayment/CreateCreditCardPayment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditCardPaymentRequestInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QRPaymentRequestInput} [qRPaymentRequestInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMpayPaymentCreateQrPaymentPost: async (qRPaymentRequestInput?: QRPaymentRequestInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MpayPayment/CreateQrPayment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(qRPaymentRequestInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InquiryRequestInput} [inquiryRequestInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMpayPaymentInquiryOrderPost: async (inquiryRequestInput?: InquiryRequestInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MpayPayment/InquiryOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inquiryRequestInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MpayPaymentApi - functional programming interface
 * @export
 */
export const MpayPaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MpayPaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CallbackInput} [callbackInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMpayPaymentConfirmOrderPost(callbackInput?: CallbackInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMpayPaymentConfirmOrderPost(callbackInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreditCardPaymentRequestInput} [creditCardPaymentRequestInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMpayPaymentCreateCreditCardPaymentPost(creditCardPaymentRequestInput?: CreditCardPaymentRequestInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditCardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMpayPaymentCreateCreditCardPaymentPost(creditCardPaymentRequestInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {QRPaymentRequestInput} [qRPaymentRequestInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMpayPaymentCreateQrPaymentPost(qRPaymentRequestInput?: QRPaymentRequestInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QRPaymentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMpayPaymentCreateQrPaymentPost(qRPaymentRequestInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InquiryRequestInput} [inquiryRequestInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMpayPaymentInquiryOrderPost(inquiryRequestInput?: InquiryRequestInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMpayPaymentInquiryOrderPost(inquiryRequestInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MpayPaymentApi - factory interface
 * @export
 */
export const MpayPaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MpayPaymentApiFp(configuration)
    return {
        /**
         * 
         * @param {MpayPaymentApiApiMpayPaymentConfirmOrderPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMpayPaymentConfirmOrderPost(requestParameters: MpayPaymentApiApiMpayPaymentConfirmOrderPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMpayPaymentConfirmOrderPost(requestParameters.callbackInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MpayPaymentApiApiMpayPaymentCreateCreditCardPaymentPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMpayPaymentCreateCreditCardPaymentPost(requestParameters: MpayPaymentApiApiMpayPaymentCreateCreditCardPaymentPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreditCardResponse> {
            return localVarFp.apiMpayPaymentCreateCreditCardPaymentPost(requestParameters.creditCardPaymentRequestInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MpayPaymentApiApiMpayPaymentCreateQrPaymentPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMpayPaymentCreateQrPaymentPost(requestParameters: MpayPaymentApiApiMpayPaymentCreateQrPaymentPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<QRPaymentResponse> {
            return localVarFp.apiMpayPaymentCreateQrPaymentPost(requestParameters.qRPaymentRequestInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MpayPaymentApiApiMpayPaymentInquiryOrderPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMpayPaymentInquiryOrderPost(requestParameters: MpayPaymentApiApiMpayPaymentInquiryOrderPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiMpayPaymentInquiryOrderPost(requestParameters.inquiryRequestInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiMpayPaymentConfirmOrderPost operation in MpayPaymentApi.
 * @export
 * @interface MpayPaymentApiApiMpayPaymentConfirmOrderPostRequest
 */
export interface MpayPaymentApiApiMpayPaymentConfirmOrderPostRequest {
    /**
     * 
     * @type {CallbackInput}
     * @memberof MpayPaymentApiApiMpayPaymentConfirmOrderPost
     */
    readonly callbackInput?: CallbackInput
}

/**
 * Request parameters for apiMpayPaymentCreateCreditCardPaymentPost operation in MpayPaymentApi.
 * @export
 * @interface MpayPaymentApiApiMpayPaymentCreateCreditCardPaymentPostRequest
 */
export interface MpayPaymentApiApiMpayPaymentCreateCreditCardPaymentPostRequest {
    /**
     * 
     * @type {CreditCardPaymentRequestInput}
     * @memberof MpayPaymentApiApiMpayPaymentCreateCreditCardPaymentPost
     */
    readonly creditCardPaymentRequestInput?: CreditCardPaymentRequestInput
}

/**
 * Request parameters for apiMpayPaymentCreateQrPaymentPost operation in MpayPaymentApi.
 * @export
 * @interface MpayPaymentApiApiMpayPaymentCreateQrPaymentPostRequest
 */
export interface MpayPaymentApiApiMpayPaymentCreateQrPaymentPostRequest {
    /**
     * 
     * @type {QRPaymentRequestInput}
     * @memberof MpayPaymentApiApiMpayPaymentCreateQrPaymentPost
     */
    readonly qRPaymentRequestInput?: QRPaymentRequestInput
}

/**
 * Request parameters for apiMpayPaymentInquiryOrderPost operation in MpayPaymentApi.
 * @export
 * @interface MpayPaymentApiApiMpayPaymentInquiryOrderPostRequest
 */
export interface MpayPaymentApiApiMpayPaymentInquiryOrderPostRequest {
    /**
     * 
     * @type {InquiryRequestInput}
     * @memberof MpayPaymentApiApiMpayPaymentInquiryOrderPost
     */
    readonly inquiryRequestInput?: InquiryRequestInput
}

/**
 * MpayPaymentApi - object-oriented interface
 * @export
 * @class MpayPaymentApi
 * @extends {BaseAPI}
 */
export class MpayPaymentApi extends BaseAPI {
    /**
     * 
     * @param {MpayPaymentApiApiMpayPaymentConfirmOrderPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MpayPaymentApi
     */
    public apiMpayPaymentConfirmOrderPost(requestParameters: MpayPaymentApiApiMpayPaymentConfirmOrderPostRequest = {}, options?: AxiosRequestConfig) {
        return MpayPaymentApiFp(this.configuration).apiMpayPaymentConfirmOrderPost(requestParameters.callbackInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MpayPaymentApiApiMpayPaymentCreateCreditCardPaymentPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MpayPaymentApi
     */
    public apiMpayPaymentCreateCreditCardPaymentPost(requestParameters: MpayPaymentApiApiMpayPaymentCreateCreditCardPaymentPostRequest = {}, options?: AxiosRequestConfig) {
        return MpayPaymentApiFp(this.configuration).apiMpayPaymentCreateCreditCardPaymentPost(requestParameters.creditCardPaymentRequestInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MpayPaymentApiApiMpayPaymentCreateQrPaymentPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MpayPaymentApi
     */
    public apiMpayPaymentCreateQrPaymentPost(requestParameters: MpayPaymentApiApiMpayPaymentCreateQrPaymentPostRequest = {}, options?: AxiosRequestConfig) {
        return MpayPaymentApiFp(this.configuration).apiMpayPaymentCreateQrPaymentPost(requestParameters.qRPaymentRequestInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MpayPaymentApiApiMpayPaymentInquiryOrderPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MpayPaymentApi
     */
    public apiMpayPaymentInquiryOrderPost(requestParameters: MpayPaymentApiApiMpayPaymentInquiryOrderPostRequest = {}, options?: AxiosRequestConfig) {
        return MpayPaymentApiFp(this.configuration).apiMpayPaymentInquiryOrderPost(requestParameters.inquiryRequestInput, options).then((request) => request(this.axios, this.basePath));
    }
}

