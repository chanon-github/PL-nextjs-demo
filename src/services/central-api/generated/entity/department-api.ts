/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { CtlDepartmentCtlDepartmentPagination } from '../model';
// @ts-ignore
import { DeleteInput } from '../model';
// @ts-ignore
import { DepartmentInput } from '../model';
/**
 * DepartmentApi - axios parameter creator
 * @export
 */
export const DepartmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteInput} [deleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentDeleteDelete: async (deleteInput?: DeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Department/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [keyword] 
         * @param {string} [status] 
         * @param {string} [divisionCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentGetGet: async (code?: string, tenantCode?: string, branchCode?: string, keyword?: string, status?: string, divisionCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Department/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (divisionCode !== undefined) {
                localVarQueryParameter['DivisionCode'] = divisionCode;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DepartmentInput} [departmentInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentSavePost: async (departmentInput?: DepartmentInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Department/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentApi - functional programming interface
 * @export
 */
export const DepartmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteInput} [deleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentDeleteDelete(deleteInput?: DeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentDeleteDelete(deleteInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [keyword] 
         * @param {string} [status] 
         * @param {string} [divisionCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentGetGet(code?: string, tenantCode?: string, branchCode?: string, keyword?: string, status?: string, divisionCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CtlDepartmentCtlDepartmentPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentGetGet(code, tenantCode, branchCode, keyword, status, divisionCode, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DepartmentInput} [departmentInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentSavePost(departmentInput?: DepartmentInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentSavePost(departmentInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentApi - factory interface
 * @export
 */
export const DepartmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentApiFp(configuration)
    return {
        /**
         * 
         * @param {DepartmentApiApiDepartmentDeleteDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentDeleteDelete(requestParameters: DepartmentApiApiDepartmentDeleteDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiDepartmentDeleteDelete(requestParameters.deleteInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DepartmentApiApiDepartmentGetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentGetGet(requestParameters: DepartmentApiApiDepartmentGetGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CtlDepartmentCtlDepartmentPagination> {
            return localVarFp.apiDepartmentGetGet(requestParameters.code, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.keyword, requestParameters.status, requestParameters.divisionCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DepartmentApiApiDepartmentSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentSavePost(requestParameters: DepartmentApiApiDepartmentSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiDepartmentSavePost(requestParameters.departmentInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiDepartmentDeleteDelete operation in DepartmentApi.
 * @export
 * @interface DepartmentApiApiDepartmentDeleteDeleteRequest
 */
export interface DepartmentApiApiDepartmentDeleteDeleteRequest {
    /**
     * 
     * @type {DeleteInput}
     * @memberof DepartmentApiApiDepartmentDeleteDelete
     */
    readonly deleteInput?: DeleteInput
}

/**
 * Request parameters for apiDepartmentGetGet operation in DepartmentApi.
 * @export
 * @interface DepartmentApiApiDepartmentGetGetRequest
 */
export interface DepartmentApiApiDepartmentGetGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DepartmentApiApiDepartmentGetGet
     */
    readonly code?: string

    /**
     * 
     * @type {string}
     * @memberof DepartmentApiApiDepartmentGetGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof DepartmentApiApiDepartmentGetGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {string}
     * @memberof DepartmentApiApiDepartmentGetGet
     */
    readonly keyword?: string

    /**
     * 
     * @type {string}
     * @memberof DepartmentApiApiDepartmentGetGet
     */
    readonly status?: string

    /**
     * 
     * @type {string}
     * @memberof DepartmentApiApiDepartmentGetGet
     */
    readonly divisionCode?: string

    /**
     * 
     * @type {number}
     * @memberof DepartmentApiApiDepartmentGetGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof DepartmentApiApiDepartmentGetGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof DepartmentApiApiDepartmentGetGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof DepartmentApiApiDepartmentGetGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiDepartmentSavePost operation in DepartmentApi.
 * @export
 * @interface DepartmentApiApiDepartmentSavePostRequest
 */
export interface DepartmentApiApiDepartmentSavePostRequest {
    /**
     * 
     * @type {DepartmentInput}
     * @memberof DepartmentApiApiDepartmentSavePost
     */
    readonly departmentInput?: DepartmentInput
}

/**
 * DepartmentApi - object-oriented interface
 * @export
 * @class DepartmentApi
 * @extends {BaseAPI}
 */
export class DepartmentApi extends BaseAPI {
    /**
     * 
     * @param {DepartmentApiApiDepartmentDeleteDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiDepartmentDeleteDelete(requestParameters: DepartmentApiApiDepartmentDeleteDeleteRequest = {}, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).apiDepartmentDeleteDelete(requestParameters.deleteInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DepartmentApiApiDepartmentGetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiDepartmentGetGet(requestParameters: DepartmentApiApiDepartmentGetGetRequest = {}, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).apiDepartmentGetGet(requestParameters.code, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.keyword, requestParameters.status, requestParameters.divisionCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DepartmentApiApiDepartmentSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiDepartmentSavePost(requestParameters: DepartmentApiApiDepartmentSavePostRequest = {}, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).apiDepartmentSavePost(requestParameters.departmentInput, options).then((request) => request(this.axios, this.basePath));
    }
}

