/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { CarrentalDeleteInput } from '../model';
// @ts-ignore
import { CrtPriceTierDataResponse } from '../model';
// @ts-ignore
import { CrtVehicleMasterVehicleMasterSearchOutputPagination } from '../model';
// @ts-ignore
import { GetAllPriceTierOutputDataResponse } from '../model';
// @ts-ignore
import { GetAllVehicleMasterPriceOutputDataResponse } from '../model';
// @ts-ignore
import { MasterVehicleInput } from '../model';
// @ts-ignore
import { SavePriceTierInput } from '../model';
// @ts-ignore
import { SaveVMasterPriceInput } from '../model';
/**
 * VehicleMasterApi - axios parameter creator
 * @export
 */
export const VehicleMasterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CarrentalDeleteInput} [carrentalDeleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterDeleteDelete: async (carrentalDeleteInput?: CarrentalDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/VehicleMaster/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carrentalDeleteInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterDeleteTierPriceDelete: async (requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/VehicleMaster/DeleteTierPrice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [isActive] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterGetAllPriceTierGet: async (isActive?: boolean, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/VehicleMaster/GetAllPriceTier`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isActive !== undefined) {
                localVarQueryParameter['IsActive'] = isActive;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [vehicleMasterId] 
         * @param {number} [tierPriceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterGetAllVehicleMasterPriceGet: async (vehicleMasterId?: number, tierPriceId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/VehicleMaster/GetAllVehicleMasterPrice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (vehicleMasterId !== undefined) {
                localVarQueryParameter['VehicleMasterId'] = vehicleMasterId;
            }

            if (tierPriceId !== undefined) {
                localVarQueryParameter['TierPriceId'] = tierPriceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [brandCode] 
         * @param {string} [modelCode] 
         * @param {string} [colorCode] 
         * @param {string} [year] 
         * @param {string} [status] 
         * @param {number} [id] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [keyword] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterGetGet: async (brandCode?: string, modelCode?: string, colorCode?: string, year?: string, status?: string, id?: number, tenantCode?: string, branchCode?: string, keyword?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/VehicleMaster/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandCode !== undefined) {
                localVarQueryParameter['BrandCode'] = brandCode;
            }

            if (modelCode !== undefined) {
                localVarQueryParameter['ModelCode'] = modelCode;
            }

            if (colorCode !== undefined) {
                localVarQueryParameter['ColorCode'] = colorCode;
            }

            if (year !== undefined) {
                localVarQueryParameter['Year'] = year;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterGetPriceTierIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMasterVehicleMasterGetPriceTierIdGet', 'id', id)
            const localVarPath = `/api/Master/VehicleMaster/GetPriceTier/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MasterVehicleInput} [masterVehicleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterSavePost: async (masterVehicleInput?: MasterVehicleInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/VehicleMaster/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterVehicleInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SavePriceTierInput} [savePriceTierInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterSavePriceTierPost: async (savePriceTierInput?: SavePriceTierInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/VehicleMaster/SavePriceTier`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(savePriceTierInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<SaveVMasterPriceInput>} [saveVMasterPriceInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterSaveVehicleMasterPricePost: async (saveVMasterPriceInput?: Array<SaveVMasterPriceInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/VehicleMaster/SaveVehicleMasterPrice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveVMasterPriceInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleMasterApi - functional programming interface
 * @export
 */
export const VehicleMasterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleMasterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CarrentalDeleteInput} [carrentalDeleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleMasterDeleteDelete(carrentalDeleteInput?: CarrentalDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleMasterDeleteDelete(carrentalDeleteInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleMasterDeleteTierPriceDelete(requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleMasterDeleteTierPriceDelete(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {boolean} [isActive] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleMasterGetAllPriceTierGet(isActive?: boolean, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllPriceTierOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleMasterGetAllPriceTierGet(isActive, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [vehicleMasterId] 
         * @param {number} [tierPriceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleMasterGetAllVehicleMasterPriceGet(vehicleMasterId?: number, tierPriceId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllVehicleMasterPriceOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleMasterGetAllVehicleMasterPriceGet(vehicleMasterId, tierPriceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [brandCode] 
         * @param {string} [modelCode] 
         * @param {string} [colorCode] 
         * @param {string} [year] 
         * @param {string} [status] 
         * @param {number} [id] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [keyword] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleMasterGetGet(brandCode?: string, modelCode?: string, colorCode?: string, year?: string, status?: string, id?: number, tenantCode?: string, branchCode?: string, keyword?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrtVehicleMasterVehicleMasterSearchOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleMasterGetGet(brandCode, modelCode, colorCode, year, status, id, tenantCode, branchCode, keyword, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleMasterGetPriceTierIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrtPriceTierDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleMasterGetPriceTierIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MasterVehicleInput} [masterVehicleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleMasterSavePost(masterVehicleInput?: MasterVehicleInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleMasterSavePost(masterVehicleInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SavePriceTierInput} [savePriceTierInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleMasterSavePriceTierPost(savePriceTierInput?: SavePriceTierInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleMasterSavePriceTierPost(savePriceTierInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<SaveVMasterPriceInput>} [saveVMasterPriceInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleMasterSaveVehicleMasterPricePost(saveVMasterPriceInput?: Array<SaveVMasterPriceInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleMasterSaveVehicleMasterPricePost(saveVMasterPriceInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VehicleMasterApi - factory interface
 * @export
 */
export const VehicleMasterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleMasterApiFp(configuration)
    return {
        /**
         * 
         * @param {VehicleMasterApiApiMasterVehicleMasterDeleteDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterDeleteDelete(requestParameters: VehicleMasterApiApiMasterVehicleMasterDeleteDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiMasterVehicleMasterDeleteDelete(requestParameters.carrentalDeleteInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehicleMasterApiApiMasterVehicleMasterDeleteTierPriceDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterDeleteTierPriceDelete(requestParameters: VehicleMasterApiApiMasterVehicleMasterDeleteTierPriceDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiMasterVehicleMasterDeleteTierPriceDelete(requestParameters.requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehicleMasterApiApiMasterVehicleMasterGetAllPriceTierGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterGetAllPriceTierGet(requestParameters: VehicleMasterApiApiMasterVehicleMasterGetAllPriceTierGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetAllPriceTierOutputDataResponse> {
            return localVarFp.apiMasterVehicleMasterGetAllPriceTierGet(requestParameters.isActive, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehicleMasterApiApiMasterVehicleMasterGetAllVehicleMasterPriceGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterGetAllVehicleMasterPriceGet(requestParameters: VehicleMasterApiApiMasterVehicleMasterGetAllVehicleMasterPriceGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetAllVehicleMasterPriceOutputDataResponse> {
            return localVarFp.apiMasterVehicleMasterGetAllVehicleMasterPriceGet(requestParameters.vehicleMasterId, requestParameters.tierPriceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehicleMasterApiApiMasterVehicleMasterGetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterGetGet(requestParameters: VehicleMasterApiApiMasterVehicleMasterGetGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CrtVehicleMasterVehicleMasterSearchOutputPagination> {
            return localVarFp.apiMasterVehicleMasterGetGet(requestParameters.brandCode, requestParameters.modelCode, requestParameters.colorCode, requestParameters.year, requestParameters.status, requestParameters.id, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.keyword, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehicleMasterApiApiMasterVehicleMasterGetPriceTierIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterGetPriceTierIdGet(requestParameters: VehicleMasterApiApiMasterVehicleMasterGetPriceTierIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<CrtPriceTierDataResponse> {
            return localVarFp.apiMasterVehicleMasterGetPriceTierIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehicleMasterApiApiMasterVehicleMasterSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterSavePost(requestParameters: VehicleMasterApiApiMasterVehicleMasterSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiMasterVehicleMasterSavePost(requestParameters.masterVehicleInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehicleMasterApiApiMasterVehicleMasterSavePriceTierPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterSavePriceTierPost(requestParameters: VehicleMasterApiApiMasterVehicleMasterSavePriceTierPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiMasterVehicleMasterSavePriceTierPost(requestParameters.savePriceTierInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehicleMasterApiApiMasterVehicleMasterSaveVehicleMasterPricePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleMasterSaveVehicleMasterPricePost(requestParameters: VehicleMasterApiApiMasterVehicleMasterSaveVehicleMasterPricePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiMasterVehicleMasterSaveVehicleMasterPricePost(requestParameters.saveVMasterPriceInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiMasterVehicleMasterDeleteDelete operation in VehicleMasterApi.
 * @export
 * @interface VehicleMasterApiApiMasterVehicleMasterDeleteDeleteRequest
 */
export interface VehicleMasterApiApiMasterVehicleMasterDeleteDeleteRequest {
    /**
     * 
     * @type {CarrentalDeleteInput}
     * @memberof VehicleMasterApiApiMasterVehicleMasterDeleteDelete
     */
    readonly carrentalDeleteInput?: CarrentalDeleteInput
}

/**
 * Request parameters for apiMasterVehicleMasterDeleteTierPriceDelete operation in VehicleMasterApi.
 * @export
 * @interface VehicleMasterApiApiMasterVehicleMasterDeleteTierPriceDeleteRequest
 */
export interface VehicleMasterApiApiMasterVehicleMasterDeleteTierPriceDeleteRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof VehicleMasterApiApiMasterVehicleMasterDeleteTierPriceDelete
     */
    readonly requestBody?: Array<number>
}

/**
 * Request parameters for apiMasterVehicleMasterGetAllPriceTierGet operation in VehicleMasterApi.
 * @export
 * @interface VehicleMasterApiApiMasterVehicleMasterGetAllPriceTierGetRequest
 */
export interface VehicleMasterApiApiMasterVehicleMasterGetAllPriceTierGetRequest {
    /**
     * 
     * @type {boolean}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetAllPriceTierGet
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {number}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetAllPriceTierGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetAllPriceTierGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetAllPriceTierGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetAllPriceTierGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiMasterVehicleMasterGetAllVehicleMasterPriceGet operation in VehicleMasterApi.
 * @export
 * @interface VehicleMasterApiApiMasterVehicleMasterGetAllVehicleMasterPriceGetRequest
 */
export interface VehicleMasterApiApiMasterVehicleMasterGetAllVehicleMasterPriceGetRequest {
    /**
     * 
     * @type {number}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetAllVehicleMasterPriceGet
     */
    readonly vehicleMasterId?: number

    /**
     * 
     * @type {number}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetAllVehicleMasterPriceGet
     */
    readonly tierPriceId?: number
}

/**
 * Request parameters for apiMasterVehicleMasterGetGet operation in VehicleMasterApi.
 * @export
 * @interface VehicleMasterApiApiMasterVehicleMasterGetGetRequest
 */
export interface VehicleMasterApiApiMasterVehicleMasterGetGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly brandCode?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly modelCode?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly colorCode?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly year?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly status?: string

    /**
     * 
     * @type {number}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly keyword?: string

    /**
     * 
     * @type {number}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiMasterVehicleMasterGetPriceTierIdGet operation in VehicleMasterApi.
 * @export
 * @interface VehicleMasterApiApiMasterVehicleMasterGetPriceTierIdGetRequest
 */
export interface VehicleMasterApiApiMasterVehicleMasterGetPriceTierIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof VehicleMasterApiApiMasterVehicleMasterGetPriceTierIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiMasterVehicleMasterSavePost operation in VehicleMasterApi.
 * @export
 * @interface VehicleMasterApiApiMasterVehicleMasterSavePostRequest
 */
export interface VehicleMasterApiApiMasterVehicleMasterSavePostRequest {
    /**
     * 
     * @type {MasterVehicleInput}
     * @memberof VehicleMasterApiApiMasterVehicleMasterSavePost
     */
    readonly masterVehicleInput?: MasterVehicleInput
}

/**
 * Request parameters for apiMasterVehicleMasterSavePriceTierPost operation in VehicleMasterApi.
 * @export
 * @interface VehicleMasterApiApiMasterVehicleMasterSavePriceTierPostRequest
 */
export interface VehicleMasterApiApiMasterVehicleMasterSavePriceTierPostRequest {
    /**
     * 
     * @type {SavePriceTierInput}
     * @memberof VehicleMasterApiApiMasterVehicleMasterSavePriceTierPost
     */
    readonly savePriceTierInput?: SavePriceTierInput
}

/**
 * Request parameters for apiMasterVehicleMasterSaveVehicleMasterPricePost operation in VehicleMasterApi.
 * @export
 * @interface VehicleMasterApiApiMasterVehicleMasterSaveVehicleMasterPricePostRequest
 */
export interface VehicleMasterApiApiMasterVehicleMasterSaveVehicleMasterPricePostRequest {
    /**
     * 
     * @type {Array<SaveVMasterPriceInput>}
     * @memberof VehicleMasterApiApiMasterVehicleMasterSaveVehicleMasterPricePost
     */
    readonly saveVMasterPriceInput?: Array<SaveVMasterPriceInput>
}

/**
 * VehicleMasterApi - object-oriented interface
 * @export
 * @class VehicleMasterApi
 * @extends {BaseAPI}
 */
export class VehicleMasterApi extends BaseAPI {
    /**
     * 
     * @param {VehicleMasterApiApiMasterVehicleMasterDeleteDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleMasterApi
     */
    public apiMasterVehicleMasterDeleteDelete(requestParameters: VehicleMasterApiApiMasterVehicleMasterDeleteDeleteRequest = {}, options?: AxiosRequestConfig) {
        return VehicleMasterApiFp(this.configuration).apiMasterVehicleMasterDeleteDelete(requestParameters.carrentalDeleteInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VehicleMasterApiApiMasterVehicleMasterDeleteTierPriceDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleMasterApi
     */
    public apiMasterVehicleMasterDeleteTierPriceDelete(requestParameters: VehicleMasterApiApiMasterVehicleMasterDeleteTierPriceDeleteRequest = {}, options?: AxiosRequestConfig) {
        return VehicleMasterApiFp(this.configuration).apiMasterVehicleMasterDeleteTierPriceDelete(requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VehicleMasterApiApiMasterVehicleMasterGetAllPriceTierGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleMasterApi
     */
    public apiMasterVehicleMasterGetAllPriceTierGet(requestParameters: VehicleMasterApiApiMasterVehicleMasterGetAllPriceTierGetRequest = {}, options?: AxiosRequestConfig) {
        return VehicleMasterApiFp(this.configuration).apiMasterVehicleMasterGetAllPriceTierGet(requestParameters.isActive, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VehicleMasterApiApiMasterVehicleMasterGetAllVehicleMasterPriceGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleMasterApi
     */
    public apiMasterVehicleMasterGetAllVehicleMasterPriceGet(requestParameters: VehicleMasterApiApiMasterVehicleMasterGetAllVehicleMasterPriceGetRequest = {}, options?: AxiosRequestConfig) {
        return VehicleMasterApiFp(this.configuration).apiMasterVehicleMasterGetAllVehicleMasterPriceGet(requestParameters.vehicleMasterId, requestParameters.tierPriceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VehicleMasterApiApiMasterVehicleMasterGetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleMasterApi
     */
    public apiMasterVehicleMasterGetGet(requestParameters: VehicleMasterApiApiMasterVehicleMasterGetGetRequest = {}, options?: AxiosRequestConfig) {
        return VehicleMasterApiFp(this.configuration).apiMasterVehicleMasterGetGet(requestParameters.brandCode, requestParameters.modelCode, requestParameters.colorCode, requestParameters.year, requestParameters.status, requestParameters.id, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.keyword, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VehicleMasterApiApiMasterVehicleMasterGetPriceTierIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleMasterApi
     */
    public apiMasterVehicleMasterGetPriceTierIdGet(requestParameters: VehicleMasterApiApiMasterVehicleMasterGetPriceTierIdGetRequest, options?: AxiosRequestConfig) {
        return VehicleMasterApiFp(this.configuration).apiMasterVehicleMasterGetPriceTierIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VehicleMasterApiApiMasterVehicleMasterSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleMasterApi
     */
    public apiMasterVehicleMasterSavePost(requestParameters: VehicleMasterApiApiMasterVehicleMasterSavePostRequest = {}, options?: AxiosRequestConfig) {
        return VehicleMasterApiFp(this.configuration).apiMasterVehicleMasterSavePost(requestParameters.masterVehicleInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VehicleMasterApiApiMasterVehicleMasterSavePriceTierPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleMasterApi
     */
    public apiMasterVehicleMasterSavePriceTierPost(requestParameters: VehicleMasterApiApiMasterVehicleMasterSavePriceTierPostRequest = {}, options?: AxiosRequestConfig) {
        return VehicleMasterApiFp(this.configuration).apiMasterVehicleMasterSavePriceTierPost(requestParameters.savePriceTierInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VehicleMasterApiApiMasterVehicleMasterSaveVehicleMasterPricePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleMasterApi
     */
    public apiMasterVehicleMasterSaveVehicleMasterPricePost(requestParameters: VehicleMasterApiApiMasterVehicleMasterSaveVehicleMasterPricePostRequest = {}, options?: AxiosRequestConfig) {
        return VehicleMasterApiFp(this.configuration).apiMasterVehicleMasterSaveVehicleMasterPricePost(requestParameters.saveVMasterPriceInput, options).then((request) => request(this.axios, this.basePath));
    }
}

