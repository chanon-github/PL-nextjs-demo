/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { CarrentalDeleteInput } from '../model';
// @ts-ignore
import { VehicleItemInput } from '../model';
// @ts-ignore
import { VehicleItemSearchOutputVehicleItemSearchOutputPagination } from '../model';
/**
 * VehicleItemApi - axios parameter creator
 * @export
 */
export const VehicleItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CarrentalDeleteInput} [carrentalDeleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleItemDeleteDelete: async (carrentalDeleteInput?: CarrentalDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/VehicleItem/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carrentalDeleteInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [chassisNo] 
         * @param {string} [licensePlate] 
         * @param {string} [brandCode] 
         * @param {string} [modelCode] 
         * @param {string} [colorCode] 
         * @param {number} [vehiclePortId] 
         * @param {number} [vehicleLocationId] 
         * @param {string} [status] 
         * @param {number} [id] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [keyword] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleItemGetGet: async (chassisNo?: string, licensePlate?: string, brandCode?: string, modelCode?: string, colorCode?: string, vehiclePortId?: number, vehicleLocationId?: number, status?: string, id?: number, tenantCode?: string, branchCode?: string, keyword?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/VehicleItem/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chassisNo !== undefined) {
                localVarQueryParameter['ChassisNo'] = chassisNo;
            }

            if (licensePlate !== undefined) {
                localVarQueryParameter['LicensePlate'] = licensePlate;
            }

            if (brandCode !== undefined) {
                localVarQueryParameter['BrandCode'] = brandCode;
            }

            if (modelCode !== undefined) {
                localVarQueryParameter['ModelCode'] = modelCode;
            }

            if (colorCode !== undefined) {
                localVarQueryParameter['ColorCode'] = colorCode;
            }

            if (vehiclePortId !== undefined) {
                localVarQueryParameter['VehiclePortId'] = vehiclePortId;
            }

            if (vehicleLocationId !== undefined) {
                localVarQueryParameter['VehicleLocationId'] = vehicleLocationId;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VehicleItemInput} [vehicleItemInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleItemSavePost: async (vehicleItemInput?: VehicleItemInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/VehicleItem/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vehicleItemInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleItemApi - functional programming interface
 * @export
 */
export const VehicleItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CarrentalDeleteInput} [carrentalDeleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleItemDeleteDelete(carrentalDeleteInput?: CarrentalDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleItemDeleteDelete(carrentalDeleteInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [chassisNo] 
         * @param {string} [licensePlate] 
         * @param {string} [brandCode] 
         * @param {string} [modelCode] 
         * @param {string} [colorCode] 
         * @param {number} [vehiclePortId] 
         * @param {number} [vehicleLocationId] 
         * @param {string} [status] 
         * @param {number} [id] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [keyword] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleItemGetGet(chassisNo?: string, licensePlate?: string, brandCode?: string, modelCode?: string, colorCode?: string, vehiclePortId?: number, vehicleLocationId?: number, status?: string, id?: number, tenantCode?: string, branchCode?: string, keyword?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleItemSearchOutputVehicleItemSearchOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleItemGetGet(chassisNo, licensePlate, brandCode, modelCode, colorCode, vehiclePortId, vehicleLocationId, status, id, tenantCode, branchCode, keyword, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VehicleItemInput} [vehicleItemInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterVehicleItemSavePost(vehicleItemInput?: VehicleItemInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterVehicleItemSavePost(vehicleItemInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VehicleItemApi - factory interface
 * @export
 */
export const VehicleItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleItemApiFp(configuration)
    return {
        /**
         * 
         * @param {VehicleItemApiApiMasterVehicleItemDeleteDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleItemDeleteDelete(requestParameters: VehicleItemApiApiMasterVehicleItemDeleteDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiMasterVehicleItemDeleteDelete(requestParameters.carrentalDeleteInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehicleItemApiApiMasterVehicleItemGetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleItemGetGet(requestParameters: VehicleItemApiApiMasterVehicleItemGetGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VehicleItemSearchOutputVehicleItemSearchOutputPagination> {
            return localVarFp.apiMasterVehicleItemGetGet(requestParameters.chassisNo, requestParameters.licensePlate, requestParameters.brandCode, requestParameters.modelCode, requestParameters.colorCode, requestParameters.vehiclePortId, requestParameters.vehicleLocationId, requestParameters.status, requestParameters.id, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.keyword, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehicleItemApiApiMasterVehicleItemSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterVehicleItemSavePost(requestParameters: VehicleItemApiApiMasterVehicleItemSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiMasterVehicleItemSavePost(requestParameters.vehicleItemInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiMasterVehicleItemDeleteDelete operation in VehicleItemApi.
 * @export
 * @interface VehicleItemApiApiMasterVehicleItemDeleteDeleteRequest
 */
export interface VehicleItemApiApiMasterVehicleItemDeleteDeleteRequest {
    /**
     * 
     * @type {CarrentalDeleteInput}
     * @memberof VehicleItemApiApiMasterVehicleItemDeleteDelete
     */
    readonly carrentalDeleteInput?: CarrentalDeleteInput
}

/**
 * Request parameters for apiMasterVehicleItemGetGet operation in VehicleItemApi.
 * @export
 * @interface VehicleItemApiApiMasterVehicleItemGetGetRequest
 */
export interface VehicleItemApiApiMasterVehicleItemGetGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly chassisNo?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly licensePlate?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly brandCode?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly modelCode?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly colorCode?: string

    /**
     * 
     * @type {number}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly vehiclePortId?: number

    /**
     * 
     * @type {number}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly vehicleLocationId?: number

    /**
     * 
     * @type {string}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly status?: string

    /**
     * 
     * @type {number}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly keyword?: string

    /**
     * 
     * @type {number}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof VehicleItemApiApiMasterVehicleItemGetGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiMasterVehicleItemSavePost operation in VehicleItemApi.
 * @export
 * @interface VehicleItemApiApiMasterVehicleItemSavePostRequest
 */
export interface VehicleItemApiApiMasterVehicleItemSavePostRequest {
    /**
     * 
     * @type {VehicleItemInput}
     * @memberof VehicleItemApiApiMasterVehicleItemSavePost
     */
    readonly vehicleItemInput?: VehicleItemInput
}

/**
 * VehicleItemApi - object-oriented interface
 * @export
 * @class VehicleItemApi
 * @extends {BaseAPI}
 */
export class VehicleItemApi extends BaseAPI {
    /**
     * 
     * @param {VehicleItemApiApiMasterVehicleItemDeleteDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleItemApi
     */
    public apiMasterVehicleItemDeleteDelete(requestParameters: VehicleItemApiApiMasterVehicleItemDeleteDeleteRequest = {}, options?: AxiosRequestConfig) {
        return VehicleItemApiFp(this.configuration).apiMasterVehicleItemDeleteDelete(requestParameters.carrentalDeleteInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VehicleItemApiApiMasterVehicleItemGetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleItemApi
     */
    public apiMasterVehicleItemGetGet(requestParameters: VehicleItemApiApiMasterVehicleItemGetGetRequest = {}, options?: AxiosRequestConfig) {
        return VehicleItemApiFp(this.configuration).apiMasterVehicleItemGetGet(requestParameters.chassisNo, requestParameters.licensePlate, requestParameters.brandCode, requestParameters.modelCode, requestParameters.colorCode, requestParameters.vehiclePortId, requestParameters.vehicleLocationId, requestParameters.status, requestParameters.id, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.keyword, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VehicleItemApiApiMasterVehicleItemSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleItemApi
     */
    public apiMasterVehicleItemSavePost(requestParameters: VehicleItemApiApiMasterVehicleItemSavePostRequest = {}, options?: AxiosRequestConfig) {
        return VehicleItemApiFp(this.configuration).apiMasterVehicleItemSavePost(requestParameters.vehicleItemInput, options).then((request) => request(this.axios, this.basePath));
    }
}

