/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { ForgetPasswordInput } from '../model';
// @ts-ignore
import { LoginInput } from '../model';
// @ts-ignore
import { LoginOutputDataResponse } from '../model';
// @ts-ignore
import { ResetPasswordInput } from '../model';
// @ts-ignore
import { TokenExchangeInput } from '../model';
/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginInput} [loginInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginCustomerPost: async (loginInput?: LoginInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Login/Customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgetPasswordInput} [forgetPasswordInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginForgetPasswordPost: async (forgetPasswordInput?: ForgetPasswordInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Login/ForgetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgetPasswordInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginInput} [loginInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginLoginPost: async (loginInput?: LoginInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Login/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginRefreshRefreshTokenPost: async (refreshToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists('apiLoginRefreshRefreshTokenPost', 'refreshToken', refreshToken)
            const localVarPath = `/api/Login/Refresh/{refreshToken}`
                .replace(`{${"refreshToken"}}`, encodeURIComponent(String(refreshToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordInput} [resetPasswordInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginResetPasswordPost: async (resetPasswordInput?: ResetPasswordInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Login/ResetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TokenExchangeInput} [tokenExchangeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginTokenExchangePost: async (tokenExchangeInput?: TokenExchangeInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Login/TokenExchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenExchangeInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginInput} [loginInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginCustomerPost(loginInput?: LoginInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginCustomerPost(loginInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgetPasswordInput} [forgetPasswordInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginForgetPasswordPost(forgetPasswordInput?: ForgetPasswordInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginForgetPasswordPost(forgetPasswordInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginInput} [loginInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginLoginPost(loginInput?: LoginInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginLoginPost(loginInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginRefreshRefreshTokenPost(refreshToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginRefreshRefreshTokenPost(refreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordInput} [resetPasswordInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginResetPasswordPost(resetPasswordInput?: ResetPasswordInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginResetPasswordPost(resetPasswordInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TokenExchangeInput} [tokenExchangeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginTokenExchangePost(tokenExchangeInput?: TokenExchangeInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginTokenExchangePost(tokenExchangeInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginApiApiLoginCustomerPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginCustomerPost(requestParameters: LoginApiApiLoginCustomerPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LoginOutputDataResponse> {
            return localVarFp.apiLoginCustomerPost(requestParameters.loginInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginApiApiLoginForgetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginForgetPasswordPost(requestParameters: LoginApiApiLoginForgetPasswordPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiLoginForgetPasswordPost(requestParameters.forgetPasswordInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginApiApiLoginLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginLoginPost(requestParameters: LoginApiApiLoginLoginPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LoginOutputDataResponse> {
            return localVarFp.apiLoginLoginPost(requestParameters.loginInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginApiApiLoginRefreshRefreshTokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginRefreshRefreshTokenPost(requestParameters: LoginApiApiLoginRefreshRefreshTokenPostRequest, options?: AxiosRequestConfig): AxiosPromise<LoginOutputDataResponse> {
            return localVarFp.apiLoginRefreshRefreshTokenPost(requestParameters.refreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginApiApiLoginResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginResetPasswordPost(requestParameters: LoginApiApiLoginResetPasswordPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiLoginResetPasswordPost(requestParameters.resetPasswordInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginApiApiLoginTokenExchangePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginTokenExchangePost(requestParameters: LoginApiApiLoginTokenExchangePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LoginOutputDataResponse> {
            return localVarFp.apiLoginTokenExchangePost(requestParameters.tokenExchangeInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiLoginCustomerPost operation in LoginApi.
 * @export
 * @interface LoginApiApiLoginCustomerPostRequest
 */
export interface LoginApiApiLoginCustomerPostRequest {
    /**
     * 
     * @type {LoginInput}
     * @memberof LoginApiApiLoginCustomerPost
     */
    readonly loginInput?: LoginInput
}

/**
 * Request parameters for apiLoginForgetPasswordPost operation in LoginApi.
 * @export
 * @interface LoginApiApiLoginForgetPasswordPostRequest
 */
export interface LoginApiApiLoginForgetPasswordPostRequest {
    /**
     * 
     * @type {ForgetPasswordInput}
     * @memberof LoginApiApiLoginForgetPasswordPost
     */
    readonly forgetPasswordInput?: ForgetPasswordInput
}

/**
 * Request parameters for apiLoginLoginPost operation in LoginApi.
 * @export
 * @interface LoginApiApiLoginLoginPostRequest
 */
export interface LoginApiApiLoginLoginPostRequest {
    /**
     * 
     * @type {LoginInput}
     * @memberof LoginApiApiLoginLoginPost
     */
    readonly loginInput?: LoginInput
}

/**
 * Request parameters for apiLoginRefreshRefreshTokenPost operation in LoginApi.
 * @export
 * @interface LoginApiApiLoginRefreshRefreshTokenPostRequest
 */
export interface LoginApiApiLoginRefreshRefreshTokenPostRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginApiApiLoginRefreshRefreshTokenPost
     */
    readonly refreshToken: string
}

/**
 * Request parameters for apiLoginResetPasswordPost operation in LoginApi.
 * @export
 * @interface LoginApiApiLoginResetPasswordPostRequest
 */
export interface LoginApiApiLoginResetPasswordPostRequest {
    /**
     * 
     * @type {ResetPasswordInput}
     * @memberof LoginApiApiLoginResetPasswordPost
     */
    readonly resetPasswordInput?: ResetPasswordInput
}

/**
 * Request parameters for apiLoginTokenExchangePost operation in LoginApi.
 * @export
 * @interface LoginApiApiLoginTokenExchangePostRequest
 */
export interface LoginApiApiLoginTokenExchangePostRequest {
    /**
     * 
     * @type {TokenExchangeInput}
     * @memberof LoginApiApiLoginTokenExchangePost
     */
    readonly tokenExchangeInput?: TokenExchangeInput
}

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {LoginApiApiLoginCustomerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginCustomerPost(requestParameters: LoginApiApiLoginCustomerPostRequest = {}, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiLoginCustomerPost(requestParameters.loginInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginApiApiLoginForgetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginForgetPasswordPost(requestParameters: LoginApiApiLoginForgetPasswordPostRequest = {}, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiLoginForgetPasswordPost(requestParameters.forgetPasswordInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginApiApiLoginLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginLoginPost(requestParameters: LoginApiApiLoginLoginPostRequest = {}, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiLoginLoginPost(requestParameters.loginInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginApiApiLoginRefreshRefreshTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginRefreshRefreshTokenPost(requestParameters: LoginApiApiLoginRefreshRefreshTokenPostRequest, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiLoginRefreshRefreshTokenPost(requestParameters.refreshToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginApiApiLoginResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginResetPasswordPost(requestParameters: LoginApiApiLoginResetPasswordPostRequest = {}, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiLoginResetPasswordPost(requestParameters.resetPasswordInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginApiApiLoginTokenExchangePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginTokenExchangePost(requestParameters: LoginApiApiLoginTokenExchangePostRequest = {}, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiLoginTokenExchangePost(requestParameters.tokenExchangeInput, options).then((request) => request(this.axios, this.basePath));
    }
}

