/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { CtlDepartmentListDataResponse } from '../model';
// @ts-ignore
import { CtlDivisionListDataResponse } from '../model';
// @ts-ignore
import { CtlPositionListDataResponse } from '../model';
// @ts-ignore
import { CtlUserUserSearchOutputPagination } from '../model';
// @ts-ignore
import { UserDeleteInput } from '../model';
// @ts-ignore
import { UserInput } from '../model';
// @ts-ignore
import { UserUpdateInput } from '../model';
/**
 * UserManagementApi - axios parameter creator
 * @export
 */
export const UserManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserInput} [userInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementCreatePost: async (userInput?: UserInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserManagement/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserDeleteInput} [userDeleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementDeleteDelete: async (userDeleteInput?: UserDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserManagement/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDeleteInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementGetDepartmentsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserManagement/GetDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementGetDivisionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserManagement/GetDivision`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {string} [name] 
         * @param {number} [role] 
         * @param {boolean} [isActive] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementGetGet: async (userName?: string, name?: string, role?: number, isActive?: boolean, tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserManagement/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userName !== undefined) {
                localVarQueryParameter['UserName'] = userName;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (role !== undefined) {
                localVarQueryParameter['Role'] = role;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['IsActive'] = isActive;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementGetPositionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserManagement/GetPosition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserUpdateInput} [userUpdateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementUpdatePost: async (userUpdateInput?: UserUpdateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UserManagement/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserManagementApi - functional programming interface
 * @export
 */
export const UserManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserInput} [userInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManagementCreatePost(userInput?: UserInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManagementCreatePost(userInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserDeleteInput} [userDeleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManagementDeleteDelete(userDeleteInput?: UserDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManagementDeleteDelete(userDeleteInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManagementGetDepartmentsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CtlDepartmentListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManagementGetDepartmentsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManagementGetDivisionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CtlDivisionListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManagementGetDivisionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {string} [name] 
         * @param {number} [role] 
         * @param {boolean} [isActive] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManagementGetGet(userName?: string, name?: string, role?: number, isActive?: boolean, tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CtlUserUserSearchOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManagementGetGet(userName, name, role, isActive, tenantCode, branchCode, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManagementGetPositionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CtlPositionListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManagementGetPositionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserUpdateInput} [userUpdateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManagementUpdatePost(userUpdateInput?: UserUpdateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManagementUpdatePost(userUpdateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserManagementApi - factory interface
 * @export
 */
export const UserManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserManagementApiFp(configuration)
    return {
        /**
         * 
         * @param {UserManagementApiApiUserManagementCreatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementCreatePost(requestParameters: UserManagementApiApiUserManagementCreatePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiUserManagementCreatePost(requestParameters.userInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserManagementApiApiUserManagementDeleteDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementDeleteDelete(requestParameters: UserManagementApiApiUserManagementDeleteDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiUserManagementDeleteDelete(requestParameters.userDeleteInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementGetDepartmentsGet(options?: AxiosRequestConfig): AxiosPromise<CtlDepartmentListDataResponse> {
            return localVarFp.apiUserManagementGetDepartmentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementGetDivisionGet(options?: AxiosRequestConfig): AxiosPromise<CtlDivisionListDataResponse> {
            return localVarFp.apiUserManagementGetDivisionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserManagementApiApiUserManagementGetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementGetGet(requestParameters: UserManagementApiApiUserManagementGetGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CtlUserUserSearchOutputPagination> {
            return localVarFp.apiUserManagementGetGet(requestParameters.userName, requestParameters.name, requestParameters.role, requestParameters.isActive, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementGetPositionGet(options?: AxiosRequestConfig): AxiosPromise<CtlPositionListDataResponse> {
            return localVarFp.apiUserManagementGetPositionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserManagementApiApiUserManagementUpdatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagementUpdatePost(requestParameters: UserManagementApiApiUserManagementUpdatePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiUserManagementUpdatePost(requestParameters.userUpdateInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiUserManagementCreatePost operation in UserManagementApi.
 * @export
 * @interface UserManagementApiApiUserManagementCreatePostRequest
 */
export interface UserManagementApiApiUserManagementCreatePostRequest {
    /**
     * 
     * @type {UserInput}
     * @memberof UserManagementApiApiUserManagementCreatePost
     */
    readonly userInput?: UserInput
}

/**
 * Request parameters for apiUserManagementDeleteDelete operation in UserManagementApi.
 * @export
 * @interface UserManagementApiApiUserManagementDeleteDeleteRequest
 */
export interface UserManagementApiApiUserManagementDeleteDeleteRequest {
    /**
     * 
     * @type {UserDeleteInput}
     * @memberof UserManagementApiApiUserManagementDeleteDelete
     */
    readonly userDeleteInput?: UserDeleteInput
}

/**
 * Request parameters for apiUserManagementGetGet operation in UserManagementApi.
 * @export
 * @interface UserManagementApiApiUserManagementGetGetRequest
 */
export interface UserManagementApiApiUserManagementGetGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UserManagementApiApiUserManagementGetGet
     */
    readonly userName?: string

    /**
     * 
     * @type {string}
     * @memberof UserManagementApiApiUserManagementGetGet
     */
    readonly name?: string

    /**
     * 
     * @type {number}
     * @memberof UserManagementApiApiUserManagementGetGet
     */
    readonly role?: number

    /**
     * 
     * @type {boolean}
     * @memberof UserManagementApiApiUserManagementGetGet
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {string}
     * @memberof UserManagementApiApiUserManagementGetGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof UserManagementApiApiUserManagementGetGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {number}
     * @memberof UserManagementApiApiUserManagementGetGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof UserManagementApiApiUserManagementGetGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof UserManagementApiApiUserManagementGetGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof UserManagementApiApiUserManagementGetGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiUserManagementUpdatePost operation in UserManagementApi.
 * @export
 * @interface UserManagementApiApiUserManagementUpdatePostRequest
 */
export interface UserManagementApiApiUserManagementUpdatePostRequest {
    /**
     * 
     * @type {UserUpdateInput}
     * @memberof UserManagementApiApiUserManagementUpdatePost
     */
    readonly userUpdateInput?: UserUpdateInput
}

/**
 * UserManagementApi - object-oriented interface
 * @export
 * @class UserManagementApi
 * @extends {BaseAPI}
 */
export class UserManagementApi extends BaseAPI {
    /**
     * 
     * @param {UserManagementApiApiUserManagementCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUserManagementCreatePost(requestParameters: UserManagementApiApiUserManagementCreatePostRequest = {}, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUserManagementCreatePost(requestParameters.userInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserManagementApiApiUserManagementDeleteDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUserManagementDeleteDelete(requestParameters: UserManagementApiApiUserManagementDeleteDeleteRequest = {}, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUserManagementDeleteDelete(requestParameters.userDeleteInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUserManagementGetDepartmentsGet(options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUserManagementGetDepartmentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUserManagementGetDivisionGet(options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUserManagementGetDivisionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserManagementApiApiUserManagementGetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUserManagementGetGet(requestParameters: UserManagementApiApiUserManagementGetGetRequest = {}, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUserManagementGetGet(requestParameters.userName, requestParameters.name, requestParameters.role, requestParameters.isActive, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUserManagementGetPositionGet(options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUserManagementGetPositionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserManagementApiApiUserManagementUpdatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public apiUserManagementUpdatePost(requestParameters: UserManagementApiApiUserManagementUpdatePostRequest = {}, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).apiUserManagementUpdatePost(requestParameters.userUpdateInput, options).then((request) => request(this.axios, this.basePath));
    }
}

