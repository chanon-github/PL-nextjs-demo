/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { CtlContentCtlContentPagination } from '../model';
// @ts-ignore
import { FaqDeleteInput } from '../model';
// @ts-ignore
import { FaqInput } from '../model';
/**
 * ContentApi - axios parameter creator
 * @export
 */
export const ContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FaqDeleteInput} [faqDeleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentDeleteDelete: async (faqDeleteInput?: FaqDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Content/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqDeleteInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {Array<string>} [categoryCode] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [metaKeyword] 
         * @param {string} [status] 
         * @param {boolean} [isActive] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentGetGet: async (id?: number, categoryCode?: Array<string>, tenantCode?: string, branchCode?: string, metaKeyword?: string, status?: string, isActive?: boolean, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Content/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (categoryCode) {
                localVarQueryParameter['CategoryCode'] = categoryCode;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (metaKeyword !== undefined) {
                localVarQueryParameter['MetaKeyword'] = metaKeyword;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['IsActive'] = isActive;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FaqInput} [faqInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentSavePost: async (faqInput?: FaqInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Content/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentApi - functional programming interface
 * @export
 */
export const ContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FaqDeleteInput} [faqDeleteInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiContentDeleteDelete(faqDeleteInput?: FaqDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiContentDeleteDelete(faqDeleteInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {Array<string>} [categoryCode] 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [metaKeyword] 
         * @param {string} [status] 
         * @param {boolean} [isActive] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiContentGetGet(id?: number, categoryCode?: Array<string>, tenantCode?: string, branchCode?: string, metaKeyword?: string, status?: string, isActive?: boolean, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CtlContentCtlContentPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiContentGetGet(id, categoryCode, tenantCode, branchCode, metaKeyword, status, isActive, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FaqInput} [faqInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiContentSavePost(faqInput?: FaqInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiContentSavePost(faqInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContentApi - factory interface
 * @export
 */
export const ContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentApiFp(configuration)
    return {
        /**
         * 
         * @param {ContentApiApiContentDeleteDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentDeleteDelete(requestParameters: ContentApiApiContentDeleteDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiContentDeleteDelete(requestParameters.faqDeleteInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ContentApiApiContentGetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentGetGet(requestParameters: ContentApiApiContentGetGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CtlContentCtlContentPagination> {
            return localVarFp.apiContentGetGet(requestParameters.id, requestParameters.categoryCode, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.metaKeyword, requestParameters.status, requestParameters.isActive, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ContentApiApiContentSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentSavePost(requestParameters: ContentApiApiContentSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiContentSavePost(requestParameters.faqInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiContentDeleteDelete operation in ContentApi.
 * @export
 * @interface ContentApiApiContentDeleteDeleteRequest
 */
export interface ContentApiApiContentDeleteDeleteRequest {
    /**
     * 
     * @type {FaqDeleteInput}
     * @memberof ContentApiApiContentDeleteDelete
     */
    readonly faqDeleteInput?: FaqDeleteInput
}

/**
 * Request parameters for apiContentGetGet operation in ContentApi.
 * @export
 * @interface ContentApiApiContentGetGetRequest
 */
export interface ContentApiApiContentGetGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ContentApiApiContentGetGet
     */
    readonly id?: number

    /**
     * 
     * @type {Array<string>}
     * @memberof ContentApiApiContentGetGet
     */
    readonly categoryCode?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof ContentApiApiContentGetGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof ContentApiApiContentGetGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {string}
     * @memberof ContentApiApiContentGetGet
     */
    readonly metaKeyword?: string

    /**
     * 
     * @type {string}
     * @memberof ContentApiApiContentGetGet
     */
    readonly status?: string

    /**
     * 
     * @type {boolean}
     * @memberof ContentApiApiContentGetGet
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {number}
     * @memberof ContentApiApiContentGetGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof ContentApiApiContentGetGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof ContentApiApiContentGetGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof ContentApiApiContentGetGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiContentSavePost operation in ContentApi.
 * @export
 * @interface ContentApiApiContentSavePostRequest
 */
export interface ContentApiApiContentSavePostRequest {
    /**
     * 
     * @type {FaqInput}
     * @memberof ContentApiApiContentSavePost
     */
    readonly faqInput?: FaqInput
}

/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export class ContentApi extends BaseAPI {
    /**
     * 
     * @param {ContentApiApiContentDeleteDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentDeleteDelete(requestParameters: ContentApiApiContentDeleteDeleteRequest = {}, options?: AxiosRequestConfig) {
        return ContentApiFp(this.configuration).apiContentDeleteDelete(requestParameters.faqDeleteInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ContentApiApiContentGetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentGetGet(requestParameters: ContentApiApiContentGetGetRequest = {}, options?: AxiosRequestConfig) {
        return ContentApiFp(this.configuration).apiContentGetGet(requestParameters.id, requestParameters.categoryCode, requestParameters.tenantCode, requestParameters.branchCode, requestParameters.metaKeyword, requestParameters.status, requestParameters.isActive, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ContentApiApiContentSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentSavePost(requestParameters: ContentApiApiContentSavePostRequest = {}, options?: AxiosRequestConfig) {
        return ContentApiFp(this.configuration).apiContentSavePost(requestParameters.faqInput, options).then((request) => request(this.axios, this.basePath));
    }
}

