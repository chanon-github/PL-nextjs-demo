/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BannerSaveInput } from '../model';
// @ts-ignore
import { BaseResponse } from '../model';
// @ts-ignore
import { CtlBannerDataResponse } from '../model';
// @ts-ignore
import { CtlBannerListDataResponse } from '../model';
/**
 * BannerApi - axios parameter creator
 * @export
 */
export const BannerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerDeleteIdPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBannerDeleteIdPost', 'id', id)
            const localVarPath = `/api/Banner/Delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerGetBannerFrontendTenantIdGet: async (tenantId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiBannerGetBannerFrontendTenantIdGet', 'tenantId', tenantId)
            const localVarPath = `/api/Banner/GetBannerFrontend/{tenantId}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerGetIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBannerGetIdGet', 'id', id)
            const localVarPath = `/api/Banner/Get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BannerSaveInput} [bannerSaveInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerSavePost: async (bannerSaveInput?: BannerSaveInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Banner/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bannerSaveInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BannerApi - functional programming interface
 * @export
 */
export const BannerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BannerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBannerDeleteIdPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBannerDeleteIdPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBannerGetBannerFrontendTenantIdGet(tenantId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CtlBannerListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBannerGetBannerFrontendTenantIdGet(tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBannerGetIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CtlBannerDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBannerGetIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BannerSaveInput} [bannerSaveInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBannerSavePost(bannerSaveInput?: BannerSaveInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBannerSavePost(bannerSaveInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BannerApi - factory interface
 * @export
 */
export const BannerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BannerApiFp(configuration)
    return {
        /**
         * 
         * @param {BannerApiApiBannerDeleteIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerDeleteIdPost(requestParameters: BannerApiApiBannerDeleteIdPostRequest, options?: AxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.apiBannerDeleteIdPost(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BannerApiApiBannerGetBannerFrontendTenantIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerGetBannerFrontendTenantIdGet(requestParameters: BannerApiApiBannerGetBannerFrontendTenantIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<CtlBannerListDataResponse> {
            return localVarFp.apiBannerGetBannerFrontendTenantIdGet(requestParameters.tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BannerApiApiBannerGetIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerGetIdGet(requestParameters: BannerApiApiBannerGetIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<CtlBannerDataResponse> {
            return localVarFp.apiBannerGetIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BannerApiApiBannerSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerSavePost(requestParameters: BannerApiApiBannerSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.apiBannerSavePost(requestParameters.bannerSaveInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBannerDeleteIdPost operation in BannerApi.
 * @export
 * @interface BannerApiApiBannerDeleteIdPostRequest
 */
export interface BannerApiApiBannerDeleteIdPostRequest {
    /**
     * 
     * @type {number}
     * @memberof BannerApiApiBannerDeleteIdPost
     */
    readonly id: number
}

/**
 * Request parameters for apiBannerGetBannerFrontendTenantIdGet operation in BannerApi.
 * @export
 * @interface BannerApiApiBannerGetBannerFrontendTenantIdGetRequest
 */
export interface BannerApiApiBannerGetBannerFrontendTenantIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BannerApiApiBannerGetBannerFrontendTenantIdGet
     */
    readonly tenantId: number
}

/**
 * Request parameters for apiBannerGetIdGet operation in BannerApi.
 * @export
 * @interface BannerApiApiBannerGetIdGetRequest
 */
export interface BannerApiApiBannerGetIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BannerApiApiBannerGetIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiBannerSavePost operation in BannerApi.
 * @export
 * @interface BannerApiApiBannerSavePostRequest
 */
export interface BannerApiApiBannerSavePostRequest {
    /**
     * 
     * @type {BannerSaveInput}
     * @memberof BannerApiApiBannerSavePost
     */
    readonly bannerSaveInput?: BannerSaveInput
}

/**
 * BannerApi - object-oriented interface
 * @export
 * @class BannerApi
 * @extends {BaseAPI}
 */
export class BannerApi extends BaseAPI {
    /**
     * 
     * @param {BannerApiApiBannerDeleteIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public apiBannerDeleteIdPost(requestParameters: BannerApiApiBannerDeleteIdPostRequest, options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).apiBannerDeleteIdPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BannerApiApiBannerGetBannerFrontendTenantIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public apiBannerGetBannerFrontendTenantIdGet(requestParameters: BannerApiApiBannerGetBannerFrontendTenantIdGetRequest, options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).apiBannerGetBannerFrontendTenantIdGet(requestParameters.tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BannerApiApiBannerGetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public apiBannerGetIdGet(requestParameters: BannerApiApiBannerGetIdGetRequest, options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).apiBannerGetIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BannerApiApiBannerSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public apiBannerSavePost(requestParameters: BannerApiApiBannerSavePostRequest = {}, options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).apiBannerSavePost(requestParameters.bannerSaveInput, options).then((request) => request(this.axios, this.basePath));
    }
}

