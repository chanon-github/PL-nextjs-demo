/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { BranchInput } from '../model';
// @ts-ignore
import { BranchSearchOutputBranchSearchOutputPagination } from '../model';
// @ts-ignore
import { DeleteTenantInput } from '../model';
/**
 * BranchApi - axios parameter creator
 * @export
 */
export const BranchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteTenantInput} [deleteTenantInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterBranchDeleteDelete: async (deleteTenantInput?: DeleteTenantInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/Branch/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTenantInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [tenantName] 
         * @param {string} [name] 
         * @param {string} [branchCode] 
         * @param {string} [taxId] 
         * @param {string} [address] 
         * @param {string} [postcode] 
         * @param {string} [contactName] 
         * @param {string} [contactTel] 
         * @param {string} [contactMobile] 
         * @param {string} [contactEmail] 
         * @param {string} [location] 
         * @param {string} [status] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterBranchGetGet: async (code?: string, tenantName?: string, name?: string, branchCode?: string, taxId?: string, address?: string, postcode?: string, contactName?: string, contactTel?: string, contactMobile?: string, contactEmail?: string, location?: string, status?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/Branch/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (tenantName !== undefined) {
                localVarQueryParameter['TenantName'] = tenantName;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (taxId !== undefined) {
                localVarQueryParameter['TaxId'] = taxId;
            }

            if (address !== undefined) {
                localVarQueryParameter['Address'] = address;
            }

            if (postcode !== undefined) {
                localVarQueryParameter['Postcode'] = postcode;
            }

            if (contactName !== undefined) {
                localVarQueryParameter['ContactName'] = contactName;
            }

            if (contactTel !== undefined) {
                localVarQueryParameter['ContactTel'] = contactTel;
            }

            if (contactMobile !== undefined) {
                localVarQueryParameter['ContactMobile'] = contactMobile;
            }

            if (contactEmail !== undefined) {
                localVarQueryParameter['ContactEmail'] = contactEmail;
            }

            if (location !== undefined) {
                localVarQueryParameter['Location'] = location;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BranchInput} [branchInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterBranchSavePost: async (branchInput?: BranchInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/Branch/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(branchInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BranchApi - functional programming interface
 * @export
 */
export const BranchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BranchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteTenantInput} [deleteTenantInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterBranchDeleteDelete(deleteTenantInput?: DeleteTenantInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterBranchDeleteDelete(deleteTenantInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [tenantName] 
         * @param {string} [name] 
         * @param {string} [branchCode] 
         * @param {string} [taxId] 
         * @param {string} [address] 
         * @param {string} [postcode] 
         * @param {string} [contactName] 
         * @param {string} [contactTel] 
         * @param {string} [contactMobile] 
         * @param {string} [contactEmail] 
         * @param {string} [location] 
         * @param {string} [status] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterBranchGetGet(code?: string, tenantName?: string, name?: string, branchCode?: string, taxId?: string, address?: string, postcode?: string, contactName?: string, contactTel?: string, contactMobile?: string, contactEmail?: string, location?: string, status?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchSearchOutputBranchSearchOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterBranchGetGet(code, tenantName, name, branchCode, taxId, address, postcode, contactName, contactTel, contactMobile, contactEmail, location, status, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BranchInput} [branchInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterBranchSavePost(branchInput?: BranchInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterBranchSavePost(branchInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BranchApi - factory interface
 * @export
 */
export const BranchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BranchApiFp(configuration)
    return {
        /**
         * 
         * @param {BranchApiApiMasterBranchDeleteDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterBranchDeleteDelete(requestParameters: BranchApiApiMasterBranchDeleteDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiMasterBranchDeleteDelete(requestParameters.deleteTenantInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BranchApiApiMasterBranchGetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterBranchGetGet(requestParameters: BranchApiApiMasterBranchGetGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BranchSearchOutputBranchSearchOutputPagination> {
            return localVarFp.apiMasterBranchGetGet(requestParameters.code, requestParameters.tenantName, requestParameters.name, requestParameters.branchCode, requestParameters.taxId, requestParameters.address, requestParameters.postcode, requestParameters.contactName, requestParameters.contactTel, requestParameters.contactMobile, requestParameters.contactEmail, requestParameters.location, requestParameters.status, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BranchApiApiMasterBranchSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterBranchSavePost(requestParameters: BranchApiApiMasterBranchSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiMasterBranchSavePost(requestParameters.branchInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiMasterBranchDeleteDelete operation in BranchApi.
 * @export
 * @interface BranchApiApiMasterBranchDeleteDeleteRequest
 */
export interface BranchApiApiMasterBranchDeleteDeleteRequest {
    /**
     * 
     * @type {DeleteTenantInput}
     * @memberof BranchApiApiMasterBranchDeleteDelete
     */
    readonly deleteTenantInput?: DeleteTenantInput
}

/**
 * Request parameters for apiMasterBranchGetGet operation in BranchApi.
 * @export
 * @interface BranchApiApiMasterBranchGetGetRequest
 */
export interface BranchApiApiMasterBranchGetGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly code?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly tenantName?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly taxId?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly address?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly postcode?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly contactName?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly contactTel?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly contactMobile?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly contactEmail?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly location?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly status?: string

    /**
     * 
     * @type {number}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof BranchApiApiMasterBranchGetGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiMasterBranchSavePost operation in BranchApi.
 * @export
 * @interface BranchApiApiMasterBranchSavePostRequest
 */
export interface BranchApiApiMasterBranchSavePostRequest {
    /**
     * 
     * @type {BranchInput}
     * @memberof BranchApiApiMasterBranchSavePost
     */
    readonly branchInput?: BranchInput
}

/**
 * BranchApi - object-oriented interface
 * @export
 * @class BranchApi
 * @extends {BaseAPI}
 */
export class BranchApi extends BaseAPI {
    /**
     * 
     * @param {BranchApiApiMasterBranchDeleteDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchApi
     */
    public apiMasterBranchDeleteDelete(requestParameters: BranchApiApiMasterBranchDeleteDeleteRequest = {}, options?: AxiosRequestConfig) {
        return BranchApiFp(this.configuration).apiMasterBranchDeleteDelete(requestParameters.deleteTenantInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BranchApiApiMasterBranchGetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchApi
     */
    public apiMasterBranchGetGet(requestParameters: BranchApiApiMasterBranchGetGetRequest = {}, options?: AxiosRequestConfig) {
        return BranchApiFp(this.configuration).apiMasterBranchGetGet(requestParameters.code, requestParameters.tenantName, requestParameters.name, requestParameters.branchCode, requestParameters.taxId, requestParameters.address, requestParameters.postcode, requestParameters.contactName, requestParameters.contactTel, requestParameters.contactMobile, requestParameters.contactEmail, requestParameters.location, requestParameters.status, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BranchApiApiMasterBranchSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchApi
     */
    public apiMasterBranchSavePost(requestParameters: BranchApiApiMasterBranchSavePostRequest = {}, options?: AxiosRequestConfig) {
        return BranchApiFp(this.configuration).apiMasterBranchSavePost(requestParameters.branchInput, options).then((request) => request(this.axios, this.basePath));
    }
}

