/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { CtlLocationCtlLocationPaginationDataResponse } from '../model';
// @ts-ignore
import { CtlLocationDataResponse } from '../model';
// @ts-ignore
import { LocationInput } from '../model';
/**
 * LocationApi - axios parameter creator
 * @export
 */
export const LocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterLocationDeleteDelete: async (requestBody?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/Location/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterLocationGetAllGet: async (tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/Location/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterLocationGetCodeGet: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiMasterLocationGetCodeGet', 'code', code)
            const localVarPath = `/api/Master/Location/Get/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LocationInput} [locationInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterLocationSavePost: async (locationInput?: LocationInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Master/Location/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationApi - functional programming interface
 * @export
 */
export const LocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterLocationDeleteDelete(requestBody?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterLocationDeleteDelete(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterLocationGetAllGet(tenantCode?: string, branchCode?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CtlLocationCtlLocationPaginationDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterLocationGetAllGet(tenantCode, branchCode, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterLocationGetCodeGet(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CtlLocationDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterLocationGetCodeGet(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LocationInput} [locationInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMasterLocationSavePost(locationInput?: LocationInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMasterLocationSavePost(locationInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationApi - factory interface
 * @export
 */
export const LocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationApiFp(configuration)
    return {
        /**
         * 
         * @param {LocationApiApiMasterLocationDeleteDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterLocationDeleteDelete(requestParameters: LocationApiApiMasterLocationDeleteDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiMasterLocationDeleteDelete(requestParameters.requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocationApiApiMasterLocationGetAllGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterLocationGetAllGet(requestParameters: LocationApiApiMasterLocationGetAllGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CtlLocationCtlLocationPaginationDataResponse> {
            return localVarFp.apiMasterLocationGetAllGet(requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocationApiApiMasterLocationGetCodeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterLocationGetCodeGet(requestParameters: LocationApiApiMasterLocationGetCodeGetRequest, options?: AxiosRequestConfig): AxiosPromise<CtlLocationDataResponse> {
            return localVarFp.apiMasterLocationGetCodeGet(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocationApiApiMasterLocationSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMasterLocationSavePost(requestParameters: LocationApiApiMasterLocationSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiMasterLocationSavePost(requestParameters.locationInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiMasterLocationDeleteDelete operation in LocationApi.
 * @export
 * @interface LocationApiApiMasterLocationDeleteDeleteRequest
 */
export interface LocationApiApiMasterLocationDeleteDeleteRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof LocationApiApiMasterLocationDeleteDelete
     */
    readonly requestBody?: Array<string>
}

/**
 * Request parameters for apiMasterLocationGetAllGet operation in LocationApi.
 * @export
 * @interface LocationApiApiMasterLocationGetAllGetRequest
 */
export interface LocationApiApiMasterLocationGetAllGetRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationApiApiMasterLocationGetAllGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof LocationApiApiMasterLocationGetAllGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {number}
     * @memberof LocationApiApiMasterLocationGetAllGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof LocationApiApiMasterLocationGetAllGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof LocationApiApiMasterLocationGetAllGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof LocationApiApiMasterLocationGetAllGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiMasterLocationGetCodeGet operation in LocationApi.
 * @export
 * @interface LocationApiApiMasterLocationGetCodeGetRequest
 */
export interface LocationApiApiMasterLocationGetCodeGetRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationApiApiMasterLocationGetCodeGet
     */
    readonly code: string
}

/**
 * Request parameters for apiMasterLocationSavePost operation in LocationApi.
 * @export
 * @interface LocationApiApiMasterLocationSavePostRequest
 */
export interface LocationApiApiMasterLocationSavePostRequest {
    /**
     * 
     * @type {LocationInput}
     * @memberof LocationApiApiMasterLocationSavePost
     */
    readonly locationInput?: LocationInput
}

/**
 * LocationApi - object-oriented interface
 * @export
 * @class LocationApi
 * @extends {BaseAPI}
 */
export class LocationApi extends BaseAPI {
    /**
     * 
     * @param {LocationApiApiMasterLocationDeleteDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public apiMasterLocationDeleteDelete(requestParameters: LocationApiApiMasterLocationDeleteDeleteRequest = {}, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).apiMasterLocationDeleteDelete(requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationApiApiMasterLocationGetAllGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public apiMasterLocationGetAllGet(requestParameters: LocationApiApiMasterLocationGetAllGetRequest = {}, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).apiMasterLocationGetAllGet(requestParameters.tenantCode, requestParameters.branchCode, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationApiApiMasterLocationGetCodeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public apiMasterLocationGetCodeGet(requestParameters: LocationApiApiMasterLocationGetCodeGetRequest, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).apiMasterLocationGetCodeGet(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationApiApiMasterLocationSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public apiMasterLocationSavePost(requestParameters: LocationApiApiMasterLocationSavePostRequest = {}, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).apiMasterLocationSavePost(requestParameters.locationInput, options).then((request) => request(this.axios, this.basePath));
    }
}

