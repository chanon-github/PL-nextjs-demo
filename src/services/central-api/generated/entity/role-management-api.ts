/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { CtlRoleManagementCtlRoleManagementPagination } from '../model';
// @ts-ignore
import { RoleInput } from '../model';
/**
 * RoleManagementApi - axios parameter creator
 * @export
 */
export const RoleManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleManagementDeleteDelete: async (requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleManagement/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {boolean} [isActive] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleManagementGetGet: async (id?: number, name?: string, isActive?: boolean, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleManagement/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['IsActive'] = isActive;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RoleInput} [roleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleManagementSavePost: async (roleInput?: RoleInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoleManagement/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleManagementApi - functional programming interface
 * @export
 */
export const RoleManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleManagementDeleteDelete(requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleManagementDeleteDelete(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {boolean} [isActive] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleManagementGetGet(id?: number, name?: string, isActive?: boolean, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CtlRoleManagementCtlRoleManagementPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleManagementGetGet(id, name, isActive, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RoleInput} [roleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleManagementSavePost(roleInput?: RoleInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleManagementSavePost(roleInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleManagementApi - factory interface
 * @export
 */
export const RoleManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleManagementApiFp(configuration)
    return {
        /**
         * 
         * @param {RoleManagementApiApiRoleManagementDeleteDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleManagementDeleteDelete(requestParameters: RoleManagementApiApiRoleManagementDeleteDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiRoleManagementDeleteDelete(requestParameters.requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleManagementApiApiRoleManagementGetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleManagementGetGet(requestParameters: RoleManagementApiApiRoleManagementGetGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CtlRoleManagementCtlRoleManagementPagination> {
            return localVarFp.apiRoleManagementGetGet(requestParameters.id, requestParameters.name, requestParameters.isActive, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleManagementApiApiRoleManagementSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleManagementSavePost(requestParameters: RoleManagementApiApiRoleManagementSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiRoleManagementSavePost(requestParameters.roleInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiRoleManagementDeleteDelete operation in RoleManagementApi.
 * @export
 * @interface RoleManagementApiApiRoleManagementDeleteDeleteRequest
 */
export interface RoleManagementApiApiRoleManagementDeleteDeleteRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof RoleManagementApiApiRoleManagementDeleteDelete
     */
    readonly requestBody?: Array<number>
}

/**
 * Request parameters for apiRoleManagementGetGet operation in RoleManagementApi.
 * @export
 * @interface RoleManagementApiApiRoleManagementGetGetRequest
 */
export interface RoleManagementApiApiRoleManagementGetGetRequest {
    /**
     * 
     * @type {number}
     * @memberof RoleManagementApiApiRoleManagementGetGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof RoleManagementApiApiRoleManagementGetGet
     */
    readonly name?: string

    /**
     * 
     * @type {boolean}
     * @memberof RoleManagementApiApiRoleManagementGetGet
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {number}
     * @memberof RoleManagementApiApiRoleManagementGetGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof RoleManagementApiApiRoleManagementGetGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof RoleManagementApiApiRoleManagementGetGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof RoleManagementApiApiRoleManagementGetGet
     */
    readonly sortDirection?: string
}

/**
 * Request parameters for apiRoleManagementSavePost operation in RoleManagementApi.
 * @export
 * @interface RoleManagementApiApiRoleManagementSavePostRequest
 */
export interface RoleManagementApiApiRoleManagementSavePostRequest {
    /**
     * 
     * @type {RoleInput}
     * @memberof RoleManagementApiApiRoleManagementSavePost
     */
    readonly roleInput?: RoleInput
}

/**
 * RoleManagementApi - object-oriented interface
 * @export
 * @class RoleManagementApi
 * @extends {BaseAPI}
 */
export class RoleManagementApi extends BaseAPI {
    /**
     * 
     * @param {RoleManagementApiApiRoleManagementDeleteDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleManagementApi
     */
    public apiRoleManagementDeleteDelete(requestParameters: RoleManagementApiApiRoleManagementDeleteDeleteRequest = {}, options?: AxiosRequestConfig) {
        return RoleManagementApiFp(this.configuration).apiRoleManagementDeleteDelete(requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleManagementApiApiRoleManagementGetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleManagementApi
     */
    public apiRoleManagementGetGet(requestParameters: RoleManagementApiApiRoleManagementGetGetRequest = {}, options?: AxiosRequestConfig) {
        return RoleManagementApiFp(this.configuration).apiRoleManagementGetGet(requestParameters.id, requestParameters.name, requestParameters.isActive, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleManagementApiApiRoleManagementSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleManagementApi
     */
    public apiRoleManagementSavePost(requestParameters: RoleManagementApiApiRoleManagementSavePostRequest = {}, options?: AxiosRequestConfig) {
        return RoleManagementApiFp(this.configuration).apiRoleManagementSavePost(requestParameters.roleInput, options).then((request) => request(this.axios, this.basePath));
    }
}

