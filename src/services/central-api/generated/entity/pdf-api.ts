/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * PdfApi - axios parameter creator
 * @export
 */
export const PdfApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPdfDrawGridPost: async (file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Pdf/DrawGrid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} [pdfStream] 
         * @param {File} [configStream] 
         * @param {File} [dataStream] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPdfDrawPdfDocumentPost: async (pdfStream?: File, configStream?: File, dataStream?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Pdf/DrawPdfDocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (pdfStream !== undefined) { 
                localVarFormParams.append('pdfStream', pdfStream as any);
            }
    
            if (configStream !== undefined) { 
                localVarFormParams.append('configStream', configStream as any);
            }
    
            if (dataStream !== undefined) { 
                localVarFormParams.append('dataStream', dataStream as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PdfApi - functional programming interface
 * @export
 */
export const PdfApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PdfApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPdfDrawGridPost(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPdfDrawGridPost(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {File} [pdfStream] 
         * @param {File} [configStream] 
         * @param {File} [dataStream] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPdfDrawPdfDocumentPost(pdfStream?: File, configStream?: File, dataStream?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPdfDrawPdfDocumentPost(pdfStream, configStream, dataStream, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PdfApi - factory interface
 * @export
 */
export const PdfApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PdfApiFp(configuration)
    return {
        /**
         * 
         * @param {PdfApiApiPdfDrawGridPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPdfDrawGridPost(requestParameters: PdfApiApiPdfDrawGridPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPdfDrawGridPost(requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PdfApiApiPdfDrawPdfDocumentPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPdfDrawPdfDocumentPost(requestParameters: PdfApiApiPdfDrawPdfDocumentPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPdfDrawPdfDocumentPost(requestParameters.pdfStream, requestParameters.configStream, requestParameters.dataStream, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiPdfDrawGridPost operation in PdfApi.
 * @export
 * @interface PdfApiApiPdfDrawGridPostRequest
 */
export interface PdfApiApiPdfDrawGridPostRequest {
    /**
     * 
     * @type {File}
     * @memberof PdfApiApiPdfDrawGridPost
     */
    readonly file?: File
}

/**
 * Request parameters for apiPdfDrawPdfDocumentPost operation in PdfApi.
 * @export
 * @interface PdfApiApiPdfDrawPdfDocumentPostRequest
 */
export interface PdfApiApiPdfDrawPdfDocumentPostRequest {
    /**
     * 
     * @type {File}
     * @memberof PdfApiApiPdfDrawPdfDocumentPost
     */
    readonly pdfStream?: File

    /**
     * 
     * @type {File}
     * @memberof PdfApiApiPdfDrawPdfDocumentPost
     */
    readonly configStream?: File

    /**
     * 
     * @type {File}
     * @memberof PdfApiApiPdfDrawPdfDocumentPost
     */
    readonly dataStream?: File
}

/**
 * PdfApi - object-oriented interface
 * @export
 * @class PdfApi
 * @extends {BaseAPI}
 */
export class PdfApi extends BaseAPI {
    /**
     * 
     * @param {PdfApiApiPdfDrawGridPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfApi
     */
    public apiPdfDrawGridPost(requestParameters: PdfApiApiPdfDrawGridPostRequest = {}, options?: AxiosRequestConfig) {
        return PdfApiFp(this.configuration).apiPdfDrawGridPost(requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PdfApiApiPdfDrawPdfDocumentPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfApi
     */
    public apiPdfDrawPdfDocumentPost(requestParameters: PdfApiApiPdfDrawPdfDocumentPostRequest = {}, options?: AxiosRequestConfig) {
        return PdfApiFp(this.configuration).apiPdfDrawPdfDocumentPost(requestParameters.pdfStream, requestParameters.configStream, requestParameters.dataStream, options).then((request) => request(this.axios, this.basePath));
    }
}

