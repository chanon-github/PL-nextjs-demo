/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BooleanDataResponse } from '../model';
// @ts-ignore
import { SendOtpInput } from '../model';
// @ts-ignore
import { SendOtpOutputDataResponse } from '../model';
// @ts-ignore
import { VerifyOtpInput } from '../model';
/**
 * OtpApi - axios parameter creator
 * @export
 */
export const OtpApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SendOtpInput} [sendOtpInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOtpSendOtpPost: async (sendOtpInput?: SendOtpInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Otp/SendOtp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendOtpInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyOtpInput} [verifyOtpInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOtpVerifyOtpPost: async (verifyOtpInput?: VerifyOtpInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Otp/VerifyOtp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyOtpInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OtpApi - functional programming interface
 * @export
 */
export const OtpApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OtpApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SendOtpInput} [sendOtpInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOtpSendOtpPost(sendOtpInput?: SendOtpInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendOtpOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOtpSendOtpPost(sendOtpInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VerifyOtpInput} [verifyOtpInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOtpVerifyOtpPost(verifyOtpInput?: VerifyOtpInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOtpVerifyOtpPost(verifyOtpInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OtpApi - factory interface
 * @export
 */
export const OtpApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OtpApiFp(configuration)
    return {
        /**
         * 
         * @param {OtpApiApiOtpSendOtpPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOtpSendOtpPost(requestParameters: OtpApiApiOtpSendOtpPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SendOtpOutputDataResponse> {
            return localVarFp.apiOtpSendOtpPost(requestParameters.sendOtpInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OtpApiApiOtpVerifyOtpPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOtpVerifyOtpPost(requestParameters: OtpApiApiOtpVerifyOtpPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BooleanDataResponse> {
            return localVarFp.apiOtpVerifyOtpPost(requestParameters.verifyOtpInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiOtpSendOtpPost operation in OtpApi.
 * @export
 * @interface OtpApiApiOtpSendOtpPostRequest
 */
export interface OtpApiApiOtpSendOtpPostRequest {
    /**
     * 
     * @type {SendOtpInput}
     * @memberof OtpApiApiOtpSendOtpPost
     */
    readonly sendOtpInput?: SendOtpInput
}

/**
 * Request parameters for apiOtpVerifyOtpPost operation in OtpApi.
 * @export
 * @interface OtpApiApiOtpVerifyOtpPostRequest
 */
export interface OtpApiApiOtpVerifyOtpPostRequest {
    /**
     * 
     * @type {VerifyOtpInput}
     * @memberof OtpApiApiOtpVerifyOtpPost
     */
    readonly verifyOtpInput?: VerifyOtpInput
}

/**
 * OtpApi - object-oriented interface
 * @export
 * @class OtpApi
 * @extends {BaseAPI}
 */
export class OtpApi extends BaseAPI {
    /**
     * 
     * @param {OtpApiApiOtpSendOtpPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpApi
     */
    public apiOtpSendOtpPost(requestParameters: OtpApiApiOtpSendOtpPostRequest = {}, options?: AxiosRequestConfig) {
        return OtpApiFp(this.configuration).apiOtpSendOtpPost(requestParameters.sendOtpInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OtpApiApiOtpVerifyOtpPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpApi
     */
    public apiOtpVerifyOtpPost(requestParameters: OtpApiApiOtpVerifyOtpPostRequest = {}, options?: AxiosRequestConfig) {
        return OtpApiFp(this.configuration).apiOtpVerifyOtpPost(requestParameters.verifyOtpInput, options).then((request) => request(this.axios, this.basePath));
    }
}

