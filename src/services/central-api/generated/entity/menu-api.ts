/* tslint:disable */
/* eslint-disable */
/**
 * PL Cental API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BaseResponse } from '../model';
// @ts-ignore
import { GetMenuOutputListDataResponse } from '../model';
// @ts-ignore
import { SaveMenuInput } from '../model';
/**
 * MenuApi - axios parameter creator
 * @export
 */
export const MenuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuGetGet: async (tenantCode?: string, branchCode?: string, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Menu/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tenantCode !== undefined) {
                localVarQueryParameter['TenantCode'] = tenantCode;
            }

            if (branchCode !== undefined) {
                localVarQueryParameter['BranchCode'] = branchCode;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SaveMenuInput} [saveMenuInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuSavePost: async (saveMenuInput?: SaveMenuInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Menu/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveMenuInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuApi - functional programming interface
 * @export
 */
export const MenuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [tenantCode] 
         * @param {string} [branchCode] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuGetGet(tenantCode?: string, branchCode?: string, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMenuOutputListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuGetGet(tenantCode, branchCode, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SaveMenuInput} [saveMenuInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMenuSavePost(saveMenuInput?: SaveMenuInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMenuSavePost(saveMenuInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuApi - factory interface
 * @export
 */
export const MenuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuApiFp(configuration)
    return {
        /**
         * 
         * @param {MenuApiApiMenuGetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuGetGet(requestParameters: MenuApiApiMenuGetGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetMenuOutputListDataResponse> {
            return localVarFp.apiMenuGetGet(requestParameters.tenantCode, requestParameters.branchCode, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MenuApiApiMenuSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenuSavePost(requestParameters: MenuApiApiMenuSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.apiMenuSavePost(requestParameters.saveMenuInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiMenuGetGet operation in MenuApi.
 * @export
 * @interface MenuApiApiMenuGetGetRequest
 */
export interface MenuApiApiMenuGetGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MenuApiApiMenuGetGet
     */
    readonly tenantCode?: string

    /**
     * 
     * @type {string}
     * @memberof MenuApiApiMenuGetGet
     */
    readonly branchCode?: string

    /**
     * 
     * @type {string}
     * @memberof MenuApiApiMenuGetGet
     */
    readonly type?: string
}

/**
 * Request parameters for apiMenuSavePost operation in MenuApi.
 * @export
 * @interface MenuApiApiMenuSavePostRequest
 */
export interface MenuApiApiMenuSavePostRequest {
    /**
     * 
     * @type {SaveMenuInput}
     * @memberof MenuApiApiMenuSavePost
     */
    readonly saveMenuInput?: SaveMenuInput
}

/**
 * MenuApi - object-oriented interface
 * @export
 * @class MenuApi
 * @extends {BaseAPI}
 */
export class MenuApi extends BaseAPI {
    /**
     * 
     * @param {MenuApiApiMenuGetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiMenuGetGet(requestParameters: MenuApiApiMenuGetGetRequest = {}, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuGetGet(requestParameters.tenantCode, requestParameters.branchCode, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MenuApiApiMenuSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiMenuSavePost(requestParameters: MenuApiApiMenuSavePostRequest = {}, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiMenuSavePost(requestParameters.saveMenuInput, options).then((request) => request(this.axios, this.basePath));
    }
}

