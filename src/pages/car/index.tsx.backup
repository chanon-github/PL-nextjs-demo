/**
 *  Copyright (C) 2021, 2Smooth Digital Co. Ltd., all rights reserved
 *  Car - Container
 */

import { type ReactElement, useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import resolveConfig from 'tailwindcss/resolveConfig';
import tailwindConfig from '../../../tailwind.config'; // Adjust the path according to your structure
import {
    Card,
    Row,
    Col,
    Typography,
    Button,
    Checkbox,
    Radio,
    Input,
    Tooltip,
    Popconfirm,
    Select,
    Space,
    Modal,
    Table as AntTable,
    TablePaginationConfig,
    Form,
    FormInstance,
    Spin
} from 'antd';
const { Option } = Select
import {
  EditOutlined,
  InfoOutlined,
  DeleteOutlined
} from '@ant-design/icons';
import type { NextPageWithLayout } from '@/pages/_app';
import type { CarContentProps, CarContainerProps, FormSearch , TailwindConfig } from './index.model';

import useApi from '@/hooks/api/use-api';
import { vehicleTypeApi  } from '@/services/central-api/index';
import {   MasterVehicleType,MasterVehicleTypeMasterVehicleTypePagination,
  VehicleTypeApi, VehicleTypeApiApiMasterVehicleTypeGetGetRequest,VehicleTypeApiApiMasterVehicleTypeSavePostRequest,VehicleTypeApiApiMasterVehicleTypeDeleteDeleteRequest} from '@/services/central-api/generated';
import { CustomButton } from '@/components/common/button/button';
import { CustomLoading } from '@/components/common/loading/loading';
import { ConfirmModal,ConfirmModalProps } from '@/components/common/confirm-modal/confirm-modal';
import dayjs from 'dayjs';
import 'dayjs/locale/th';
import { useSelector} from 'react-redux';
import { RootState } from '@/utils/store';
import { setData } from '@/utils/action';
import {exData1,exData2,exData3 } from '@/utils/data-test.json'
const fullConfig = resolveConfig(tailwindConfig) as TailwindConfig;

const allData = [...exData1, ...exData2, ...exData3]; // Combine all data

interface FormValues {
  typeName: string;
  status: 'active' | 'inactive';
}
const CarListContainer: NextPageWithLayout<CarContainerProps> = ( props: CarContainerProps ): ReactElement => {
  /** Hook section */
  const fetchGetData = useApi(vehicleTypeApi,vehicleTypeApi.apiMasterVehicleTypeGetGet)
  const fetchSaveData = useApi(vehicleTypeApi,vehicleTypeApi.apiMasterVehicleTypeSavePost)
  const fetchRemoveData = useApi(vehicleTypeApi,vehicleTypeApi.apiMasterVehicleTypeDeleteDelete)

  const Router = useRouter();
  const userData = useSelector((state: RootState) => state.user); // Access user data from Redux
 
 const [myExData, setMyExData] = useState<any[]>();

  const [tenantCode,setTenantCode] = useState("0001");
  const [branchCode,setBranchCode] = useState("00001");

  const [ page, setPage ] = useState(1);
  const [ pageSize, setPageSize ] = useState(10);
  const [sortOrder, setSortOrder] = useState<'ascend' | 'descend' | undefined>(undefined);
  const [sortColumn, setSortColumn] = useState<string | undefined>(undefined);
  const [selectedRowKeysStore, setSelectedRowKeys] = useState<string[]>([]); // Store all selected row keys across pages


  const [ vehicleTypeData, setVehicleTypeData ] = useState<MasterVehicleType[]|undefined>();

  const [isAllChecked, setIsAllChecked] = useState(false);
  const [ totalData, setTotalData ] = useState<number|undefined>(0);
  const [visible, setVisible] = useState<boolean>(false); 
  const [form] = Form.useForm<FormInstance<FormValues>>();
  const [formSearch] = Form.useForm<FormInstance<FormValues>>();

  const [saveMode, setSaveMode] = useState<"ADD"|"EDIT"|null>(null); 
  const [dataIdForEdit, setDataIdForEdit] = useState<string|null|undefined>(null); 
  const [isLoading,setIsLoading] = useState<boolean>(false)
  const [isTableLoading,setIsTableLoading] = useState<boolean>(false)
   // State to control modal visibility
   const [modalVisible, setModalVisible] = useState(false);

   // State to hold modal properties
   const [modalProps, setModalProps] = useState<ConfirmModalProps>({
    visible: false, // Set visible to false as default
    title: 'ยืนยันแก้ไขข้อมูล',
    icon: <EditOutlined style={{ fontSize: '36px' }} />,
    confirmText: 'แก้ไข',
    cancelText: 'ยกเลิก',
    confirmButtonColor: 'bg-pl-primary',
    hoverConfirmColor: 'hover:bg-pl-primary-hover', // Optional hover color
    iconBackgroundColor: 'bg-yellow-500',
    onConfirm: undefined, // Optional, can be set when needed
    onCancel: () => {
      console.log("Modal cancelled");
    }
  });
      

      useEffect(()=>{
        console.log("userData",userData)
        getData(page,pageSize,"desc","updateDate")

        setIsLoading(true);
        // Set loading state back to false after 3 seconds
        setTimeout(() => {
          setIsLoading(false);
        }, 200); // 3000ms = 3 seconds

      },[])
      
  
  /** Functionality section */

  const getData = async (currentPage:number,currentPageSize:number,sortOrder?:string,sortField?:string,keywordSearch?:string) =>{
    setIsTableLoading(true)
      const res = await vehicleTypeApi.apiMasterVehicleTypeGetGet( 
        {
          pageIndex:currentPage, 
          pageSize:currentPageSize,
          keyword:keywordSearch,
          tenantCode:tenantCode,
          branchCode:branchCode,
          sortField:sortField,
          sortDirection:sortOrder
        }
       )

       console.log("res",res)
       setIsTableLoading(false)
       if(res?.data && res.data.items){

        setVehicleTypeData(res.data.items)
        setTotalData(res.data?.totalItems)

       }

  }
  const handleCloseModal = () => {
    console.log('Edit cancelled');
    setModalVisible(false);
  };


  
    const onChangePage = (
      page: number, pageSize: number
    ) => {
      console.log('page==>>',page)
      console.log('pageSize==>>',pageSize)
 
        setPage(page);
        setPageSize(pageSize);
        getData(page,pageSize,sortOrder,sortColumn)
       
    };

    const onChangePageSize = (param: {pageSize: number}) => {
        setPageSize(pageSize);
    };

    const onClickToAdd = () => {
      // Router.push('/car/add');
   
      setSaveMode("ADD")
      setVisible(true);

      // execute4({deleteOutput:{
      //   code: ["0005"],
      //   }
      //   }
      // )

    }

    const onClickToEdit = async (param: {id: string}) => {
      console.log("param",param)
      setSaveMode("EDIT")
      try {

        const res = await vehicleTypeApi.apiMasterVehicleTypeGetGet( 
          {
            code:param?.id,
            pageIndex:1, 
            pageSize:1,
            tenantCode:tenantCode,
            branchCode:branchCode,
          }
        )       
    
        // Check if the response contains data
        if (res && res?.data?.items && res?.data?.items?.length>0 ) {
          // // Set the form values with the data
          const responseData = res.data.items[0]; 
          setDataIdForEdit(responseData?.code)
          /*form.setFieldsValue({
            //typeName: responseData.type || '' ,
            status: responseData.status || 'active', 
          });*/
          setVisible(true);
        } 
        else {
          console.warn("No data found for this vehicle.");
          form.resetFields(); 
        }
      } catch (error) {
        console.error("Error fetching vehicle data:", error);
      }
      

    }

    const onClickRemove = () => {
        console.log("selectedValue",selectedRowKeysStore)
        setModalVisible(true);
        if(selectedRowKeysStore.length>0){
      
          setModalProps({
            visible:false,
            title: 'ยืนยันลบข้อมูล '+selectedRowKeysStore.length+" รายการ",
            icon: <DeleteOutlined style={{ fontSize: '36px' }} />,
            confirmText: 'ลบ',
            hoverConfirmColor:'#f71d3f',
            cancelText: 'ยกเลิก',
            confirmButtonColor: 'bg-pl-red',
          
            iconBackgroundColor: 'bg-pl-red',
            onCancel:undefined,
            onConfirm: () => {
              // Save logic for edit
              setIsLoading(true);
              const paramForRemove = {
                "codes": selectedRowKeysStore,
                "tenantCode": tenantCode,
                "branchCode": branchCode
              }
              fetchRemoveData.fetch({deleteInput:paramForRemove})
              .then(()=>{

                getData(page,pageSize)

              }).finally(()=>{
                  setIsLoading(false);
                  setVisible(false); // Close the modal after submission
                  form.resetFields(); // Reset form fields
                  setModalVisible(false); // Close the confirmation modal
              })

            },
          });
        }else{
          setModalProps({
            title: "กรุณาเลือกรายการที่ต้องการลบ",
            icon: <InfoOutlined style={{ fontSize: '36px' }} />,
            cancelText: 'ปิด',
            iconBackgroundColor: 'bg-pl-yellow',
            onConfirm: null,
          });

        }
        
        
    }

    const onClikToView = (param: {id: number}) => {
       Router.push(`/car/view/${param.id}`);
    }
    const onSubmitSearch = (value: FormSearch) =>{
      console.log("onSubmitSearch===>>>");
      formSearch
      .validateFields()
      .then((values:any) =>{
      
        getData(page,pageSize,undefined,undefined,values.typeName)

        console.log("values===>>>",values)
      })
      setSelectedRowKeys([])
        

    }
    const onClearSearch = (value: FormSearch) =>{
      formSearch.resetFields();
    }

    
    const onClickCheckAll = (param: boolean) =>{
      console.log("param",param);
      setIsAllChecked(param)
    }
 
    const showTotal = (total: number,range:[number,number]) => `รายการ ${range[0]}-${range[1]} จาก ${total}`;

    const onCloseFormModal = (): void => {
      console.log('dddddddddddddddddddd')
      setVisible(false);
      form.resetFields(); // Reset form fields
    };
    const onSaveFormModal = (): void => {
      
      form
        .validateFields()
        .then((values:any) => {

          
          console.log('Form values:', values);
          if(saveMode === "ADD"){

         
            
            setIsLoading(true)


          const paramForSave = {
              "type": values.typeName,
              "status": values.status,
              "tenantCode": tenantCode,
              "branchCode": branchCode
            }
          fetchSaveData.fetch({vehicleTypeInput:paramForSave}).then(()=>{
                // executeGetAllVehicle({pageIndex:page, pageSize:pageSize,tenantCode:tenantCode,branchCode:branchCode});
                getData(page, pageSize)

              }).finally(()=>{

                setIsLoading(false)
                setVisible(false); // Close the modal after submission
                form.resetFields(); // Reset form fields

              })


          }else if(saveMode === "EDIT"){
            const code = dataIdForEdit
            const paramForEdit = {
              "code":code,
              "type": values.typeName,
              "status": values.status,
              "tenantCode": tenantCode,
              "branchCode": branchCode
            }
            setModalVisible(true);
            setModalProps({
              visible:true,
              title: 'ยืนยันแก้ไขข้อมูล',
              icon: <EditOutlined style={{ fontSize: '36px' }} />,
              confirmText: 'แก้ไข',
              cancelText: 'ยกเลิก',
              confirmButtonColor: 'bg-pl-yellow',
              iconBackgroundColor: 'bg-yellow-500',
              onConfirm: () => {
                // Save logic for edit
                setIsLoading(true);
                
                fetchSaveData.fetch({vehicleTypeInput:paramForEdit}).then(() => {
                    getData(page,pageSize)
                  })
                  .finally(() => {
                    setIsLoading(false);
                    setVisible(false); // Close the modal after submission
                    form.resetFields(); // Reset form fields
                    setModalVisible(false); // Close the confirmation modal
                  });
              },
            });
          }

        })
        .catch((info:string) => {
          console.log('Validation Failed:', info);
        }).finally(()=>{
          console.log('Success Save');
          
        });
    };

    const onSetSelectedValue = (selectedList: string[]) =>{
      console.log('selectedList==>>',selectedList)
      // setSelectedList(selectedList)
    }

    const onHandleTableChange = (pagination: any, filters: any, sorter: any,e:any) => {

      //--- when sort,paging,filter trigger this func ---// 
      console.log("e==>>",e)
      if (e.action==='sort') {
          const { field, order } = sorter;

          console.log(`Fetching sorted data for column: ${field}, order: ${order}`);
      
            let sortOrder = order
            if(order==="descend"){
              sortOrder = 'desc'
            }else if (order === "ascend"){
              sortOrder = 'asc'
            }
      
            setSortOrder(sortOrder);
            setSortColumn(field);
            console.log('onHandleTableChange>>>>')
            getData(page,pageSize,sortOrder,field)
          
        }else{
          //--- other action... ---//
        }
    
    };

  // Handle row selection globally across pages
  const onHandleRowSelectionChange = (selectedRowKeys: string[], selectedRows: any) => {
    const updatedSelectedKeys = selectedRowKeys; // Only track selected keys from this page
    setSelectedRowKeys(prevKeys => {
      // Merge with previous keys, removing duplicates
      const mergedKeys = Array.from(new Set([...prevKeys, ...updatedSelectedKeys]));
      return mergedKeys;
    });
  };

  // Handle individual row selection
  const onHandleRowSelectionOne = (record: any, selected: boolean, selectedRows: any[]) => {
    if (selected) {
      setSelectedRowKeys(prevKeys => [...prevKeys, record.code]);
    } else {
      setSelectedRowKeys(prevKeys => prevKeys.filter(key => key !== record.code));
    }
  };

  // Handle select all/deselect all rows on the current page
  const onHandleRowSelectionAll = (selected: boolean, selectedRows: any[], changeRows: any[]) => {
    if (selected) {
      // Add all rows from this page to the selected keys
      const newSelectedKeys = changeRows.map((row: any) => row.code);
      setSelectedRowKeys(prevKeys => Array.from(new Set([...prevKeys, ...newSelectedKeys])));
    } else {
      // Remove all rows from this page from the selected keys
      const deselectedKeys = changeRows.map((row: any) => row.code);
      setSelectedRowKeys(prevKeys => prevKeys.filter(key => !deselectedKeys.includes(key)));
    }
  };

 


    const contentProps: CarContentProps = {
        page,
        pageSize,
        vehicleTypeData,
        isAllChecked,
        totalData,
        visible,
        form,
        isLoading,
        saveMode,
        myExData,
        selectedRowKeysStore,
        isTableLoading,
        onChangePage,
        onChangePageSize,

        onClickToEdit,

        onClikToView,
        onClickRemove,
        onClickToAdd,
        onSubmitSearch,
        onClearSearch,
        onClickCheckAll,
        onCloseFormModal,
        onSaveFormModal,
        onSetSelectedValue,
        onHandleTableChange,
        onHandleRowSelectionChange,
        onHandleRowSelectionOne,
        onHandleRowSelectionAll,
        showTotal
    };


    return (
      <>
        <Row gutter={[ 8, 16 ]}>
          <Col span={24}>
              <Card  
                className={'shadow-effect'} 
                // title={
                //   <div className="text-center">
                //     <Typography.Title type={'secondary'} level={3}>
                //       ...Form Search Is Coming...
                //     </Typography.Title>
                //   </div>
                // }
                headStyle={{ padding: 24 }}
                bodyStyle={{ padding: 24 }}
              >
                  <Row gutter={[ 8, 8 ]}>
                  {/* /// ==================================================== ///    */}
                  
                  <Col span={24}>
                      <Card className="shadow-effect" bodyStyle={{ padding: 24 }}>
                      
                        <Form
                          onFinish={() => {}}
                          className="flex flex-col md:space-y-4"
                          labelAlign="left" 
                          form={formSearch}
                        >
                        
                          <Row gutter={[16, 16]} justify="start"> 
                          
                            <Col xs={24} md={10}> 
                              <Form.Item
                                name="typeName"
                                label={
                                  <span className=" text-start md:text-end" style={{ width: '200px',  whiteSpace: 'normal', wordWrap: 'break-word' }}>
                                    ประเภทรถยนต์
                                  </span>
                                }
                                className="w-full md:ml-10 "
                                labelCol={{ span: 8 }}
                                wrapperCol={{ span: 16 }} 
                              >
                                <Input className="w-full z-10	"  placeholder="ค้นหาประเภทรถยนต์" allowClear />
                              </Form.Item>

                            </Col>

                          
                            <Col xs={24} md={10}> 
                              <Form.Item
                                name="status"
                                label={
                                  <span className=" text-start md:text-end" style={{ width: '200px',  whiteSpace: 'normal', wordWrap: 'break-word' }}>
                                    สถานะ
                                  </span>
                                }
                                className="w-full md:ml-10 "
                                labelCol={{ span: 8 }} 
                                wrapperCol={{ span: 16 }} 
                              >
                                <Select className="w-full" placeholder="เลือกสถานะ">
                                  <Option value="ทั้งหมด">ทั้งหมด</Option>
                                  <Option value="active">ใช้งาน</Option>
                                  <Option value="inactive">ไม่ใช้งาน</Option>
                                </Select>
                              </Form.Item>
                            </Col>
                          </Row>

                        </Form>

                        
                        <div className="flex flex-col md:flex-row justify-center space-y-2 md:space-y-0 md:space-x-4 mt-4 w-full">
                          <CustomButton
                            text="ล้าง"
                            // type="primary"
                            className="bg-white text-pl-primary border-pl-primary !important w-full md:w-auto"
                            // hoverColor={'#ffffff03'}
                            onClick={onClearSearch}
                          />
                          <CustomButton
                            text="ค้นหา"
                            type="primary"
                            className="bg-pl-primary text-white border-none !important w-full md:w-auto"
                            onClick={onSubmitSearch}
                          />
                        </div>
                      </Card>
                    </Col>

                {/* /// ======================================================= //// */}

                      <Col span={24} className="mt-10">
                          {renderOptions(contentProps)}
                      </Col>
                      <Col span={24}>
                          {/* {props.stockId !==  0  &&  renderTable(props)} */}
                          {renderTable(contentProps)}
                      </Col>

                      {renderModalForm(contentProps)}
                                
                      <ConfirmModal
                          visible={modalVisible}
                          title={modalProps.title}
                          icon={modalProps.icon}
                          confirmText={modalProps.confirmText}
                          cancelText={modalProps.cancelText}
                          onConfirm={modalProps.onConfirm}
                          onCancel={handleCloseModal}
                          confirmButtonColor={modalProps.confirmButtonColor}
                          hoverConfirmColor={modalProps.hoverConfirmColor}
                          iconBackgroundColor={modalProps.iconBackgroundColor}
              

                        />

                        {isLoading && <CustomLoading />}

                      
                    

                  </Row>
              </Card>
              
          </Col>
        </Row>
      </>
    );
}


const renderOptions = (props: CarContentProps): ReactElement => {
  return (
    <>
      <Row align={'middle'} justify={'space-between'}>
        {/* <Form onFinish={props.onSubmitSerach}>
          <Col>
            <Form.Item
              name="search"
            >
              <Input.Search/>
            </Form.Item>
          </Col>
        </Form> */}
     
        <Col>
 
          <CustomButton text="เพิ่ม" onClick={props.onClickToAdd} type="primary"  className="bg-pl-primary text-white border-none mr-2 !important "></CustomButton>
          <CustomButton text="ลบ" onClick={props.onClickRemove} type="primary" hoverColor='#f71d3f' className="bg-pl-red !important "></CustomButton>

        </Col>
      </Row>
    </>
  )
}


const renderTable = (props: CarContentProps): ReactElement => {

  // const rowSelection = {
  //   onChange: (selectedRowKeys: React.Key[], selectedRows: DataType[]) => {
  //   console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);
  //   props.onSetSelectedValue(selectedRowKeys as string[])
  //   },
  //   getCheckboxProps: (record: DataType) => ({
  //     // name: record.type,
  //   }),
  // };

  const rowSelection = {
    selectedRowKeys: props.selectedRowKeysStore,
    onChange: props.onHandleRowSelectionChange, // Call the function to handle row selection changes
    onSelect: props.onHandleRowSelectionOne,
    onSelectAll:props.onHandleRowSelectionAll
  };

  return (
    <>
      <AntTable
        rowKey={'code'}
        columns={[
          {
            dataIndex: "no",
            title: "ลำดับ",
            sorter: false,
            render: (_: any, __: any, index: number) => (props.page - 1) * props.pageSize + index + 1,
            // sorter: (a: any, b: any) => a.no - b.no, // Simple comparison for sorting
            width: 100, // Optionally set a fixed width for the column


          },
          {
            dataIndex: "type",
            title: "ประเภทรถ",
            sorter: true,
          },
          {
            dataIndex: "status",
            title: "สถานะ",
            sorter: true,
          },
          {
            dataIndex: "updateDate",
            title: "แก้ไขล่าสุด",
            sorter: true,
          },
          {
            dataIndex: "updateBy",
            title: "แก้ไขโดย",
            sorter: true,
          },
          {
            title: "แก้ไข",
            render: (row1: any) => {
              return (
                <Space>
                  <Button
                    type="default"
                    shape="circle"
                    icon={<EditOutlined />}
                    onClick={() => {
                      props.onClickToEdit({ id: row1.code });
                    }}
                  />
                </Space>
              );
            }
          }
        ]}
        rowSelection={rowSelection}

        dataSource={props.vehicleTypeData?.map((item:MasterVehicleType | undefined, index: number) => ({
          ...item,
          updateBy:item?.updateBy ? item?.updateBy : item?.createBy,
          updateDate:item?.updateDate?  dayjs(item?.updateDate).format('DD/MM/YYYY'):dayjs(item?.createDate).format('DD/MM/YYYY'),
          status: item?.status ? item?.status : "-",
        
        }))}

        // dataSource={props.myExData?.map((item, index: number) => ({
        //   ...item,
        //   updateDate: dayjs(item?.updateDate).format('DD/MM/YYYY'),
        //   status: item?.status ? item?.status : "-",
        //   type: item.type + item.code,
        // }))}
        size={'middle'}
        scroll={{ x: 'max-content' }}
        onChange={props.onHandleTableChange}
        showSorterTooltip={false}
        loading={props.isTableLoading}
        pagination={{
          current: props.page,
          pageSize: props.pageSize,
          total: props.totalData,
          pageSizeOptions: [10, 15, 20, 50],
          onChange: props.onChangePage,
          showSizeChanger: true,
          simple: true,
          showTotal: (total: number, range: [number, number]) => props.showTotal(total, range),
        }}
      />
    </>
  );
}
   // rowSelection object indicates the need for row selection


const renderModalForm = (props: CarContentProps): ReactElement => {

  return(
    <>
            <Modal
                title={props.saveMode === "ADD" ? "เพิ่มประเภทรถยนต์" : "แก้ไขประเภทรถยนต์"}
                visible={props.visible}
                onOk={props.onSaveFormModal}
                onCancel={props.onCloseFormModal}
                centered
                width={1000}
                footer={null}
                // okText="Submit"
                // cancelText="Cancel"
              >
                  <Form form={props.form} layout="vertical" name="modal_form_layout">
                    <Row gutter={[16, 16]}>
                      {/* First Input Field */}
                      <Col xs={24} md={12}>
                        <Form.Item
                          name="typeName"
                          label="ประเภทรถยนต์"
                          rules={[{ required: true, message: 'กรุณากรอกข้อมูล!' }]}
                        >
                          <Input placeholder="ประเภทรถยนต์" allowClear />
                        </Form.Item>
                      </Col>

                      {/* Second Input Field */}
                      <Col xs={24} md={12}>
                        <Form.Item
                          name="status"
                          label="สถานะ"
                          rules={[{ required: true, message: 'กรุณาเลือก!' }]}
                        >
                          <Select placeholder="เลือกสถานะ">
                            <Option value="active">ใช้งาน</Option>
                            <Option value="inactive">ไม่ใช้งาน</Option>
                          </Select>
                        </Form.Item>
                      </Col>
                    </Row>
                    <div style={{ display: 'flex', justifyContent: 'center', marginTop: '16px' }}>
                        <CustomButton
                          text="ยกเลิก"
                          // type="primary"
                          onClick={props.onCloseFormModal}
                          className="bg-white text-pl-primary border-pl-primary !important w-full md:w-auto mr-3"
                        />
                        <CustomButton
                          text={props.saveMode === "ADD" ? "เพิ่ม" : "แก้ไข"}
                          type="primary"
                          onClick={props.onSaveFormModal}
                          className="bg-pl-primary text-white border-none !important w-full md:w-auto"
                        />
                    </div>
                  </Form>
                </Modal>

    </>
  )
}

// CarListContainer.getLayout = (page: ReactElement) => (
//   <>
//       { page }
//   </> 
// )


export default CarListContainer;